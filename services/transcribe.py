import os
import tempfile
import logging
import io
from openai import OpenAI

logger = logging.getLogger(__name__)


class TranscribeService:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —Å OpenAI API"""
        self.openai_api_key = os.getenv('OPENAI_API_KEY')

        if not self.openai_api_key:
            logger.warning("OPENAI_API_KEY not found, using mock transcription")
            self.client = None
        else:
            try:
                self.client = OpenAI(api_key=self.openai_api_key)
                logger.info("OpenAI Whisper API initialized successfully")
            except Exception as e:
                logger.error(f"Failed to initialize OpenAI client: {e}")
                self.client = None

        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏
        self.supported_languages = {
            'km': '·ûÅ·üí·ûò·üÇ·ûö (Khmer)',
            'en': 'English',
            'ru': '–†—É—Å—Å–∫–∏–π',
            'zh': '‰∏≠Êñá',
            'th': '‡πÑ‡∏ó‡∏¢',
            'vi': 'Ti·∫øng Vi·ªát',
            'fr': 'Fran√ßais',
            'es': 'Espa√±ol',
            'ja': 'Êó•Êú¨Ë™û',
            'ko': 'ÌïúÍµ≠Ïñ¥'
        }

    def transcribe(self, audio_data):
        """–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ OpenAI API"""
        if not self.client:
            return self._mock_transcription()

        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(suffix='.mp3', delete=False) as tmp_file:
                tmp_file.write(audio_data)
                tmp_file_path = tmp_file.name

            logger.info("Starting transcription with OpenAI API")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
            with open(tmp_file_path, 'rb') as audio_file:
                transcript = self.client.audio.transcriptions.create(
                    model="whisper-1",
                    file=audio_file,
                    response_format="json"
                )

            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.unlink(tmp_file_path)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫
            detected_language = getattr(transcript, 'language', 'unknown')
            language_name = self.supported_languages.get(
                detected_language,
                f"Detected: {detected_language}"
            )

            logger.info(f"Transcription completed successfully. Language: {detected_language}")

            return {
                'success': True,
                'text': transcript.text.strip(),
                'language': language_name,
                'language_code': detected_language,
                'duration': 0
            }

        except Exception as e:
            logger.error(f"OpenAI transcription error: {e}")

            try:
                if 'tmp_file_path' in locals():
                    os.unlink(tmp_file_path)
            except:
                pass

            return {
                'success': False,
                'error': '–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
            }

    def translate_to_english(self, audio_data):
        """–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞—Ç—å –∏ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π"""
        if not self.client:
            return {
                'success': True,
                'text': 'üîß Translation service will be available after API setup.',
                'original_language': 'unknown'
            }

        try:
            with tempfile.NamedTemporaryFile(suffix='.mp3', delete=False) as tmp_file:
                tmp_file.write(audio_data)
                tmp_file_path = tmp_file.name

            logger.info("Starting translation with OpenAI API")

            with open(tmp_file_path, 'rb') as audio_file:
                translation = self.client.audio.translations.create(
                    model="whisper-1",
                    file=audio_file,
                    response_format="json"
                )

            os.unlink(tmp_file_path)

            return {
                'success': True,
                'text': translation.text.strip(),
                'original_language': getattr(translation, 'language', 'unknown')
            }

        except Exception as e:
            logger.error(f"OpenAI translation error: {e}")

            try:
                if 'tmp_file_path' in locals():
                    os.unlink(tmp_file_path)
            except:
                pass

            return {
                'success': False,
                'error': '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
            }

    def _mock_transcription(self):
        """–í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ –∫–æ–≥–¥–∞ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
        return {
            'success': True,
            'text': 'üîß –ù–∞—Å—Ç—Ä–æ–π—Ç–µ OPENAI_API_KEY –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏.',
            'language': 'System Message',
            'language_code': 'sys',
            'duration': 0
        }

    def get_supported_languages(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤"""
        return self.supported_languages

    def is_language_supported(self, language_code):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —è–∑—ã–∫"""
        return language_code in self.supported_languages