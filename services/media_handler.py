# services/media_handler.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
import os
import logging
from typing import Optional, Tuple, Dict, Any
from .audio_processor import AudioProcessor
from .language_detector import LanguageDetector
from .transcription_service import TranscriptionService
from .translation_service import TranslationService
from .native_script_service import NativeScriptService

logger = logging.getLogger(__name__)


class MediaHandler:
    def __init__(self, transcription_service: TranscriptionService, translation_service: TranslationService):
        self.audio_processor = AudioProcessor()
        self.language_detector = LanguageDetector()
        self.transcription_service = transcription_service
        self.translation_service = translation_service
        self.native_script_service = NativeScriptService()  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å

    # –ó–∞–º–µ–Ω–∏—Ç–µ –≤–∞—à –º–µ—Ç–æ–¥ process_media –Ω–∞ —ç—Ç–æ—Ç (—Å—Ç—Ä–æ–∫–∏ 21-100):

    def process_media(self, file_path: str, user_preferences: Optional[Dict] = None) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–µ–¥–∏–∞ —Ñ–∞–π–ª (–∞—É–¥–∏–æ/–≤–∏–¥–µ–æ) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç

        Args:
            file_path: –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            user_preferences: –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        audio_path = None
        try:
            logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞: {file_path}")

            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            expected_language = user_preferences.get('language') if user_preferences else None
            target_language = user_preferences.get('target_language', 'en') if user_preferences else 'en'

            # 1. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∞—É–¥–∏–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            audio_path = self.audio_processor.process_file(file_path)
            if not audio_path:
                return {
                    'success': False,
                    'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –º–µ–¥–∏–∞ —Ñ–∞–π–ª',
                    'transcription': '',
                    'detected_language': 'unknown',
                    'translation': None
                }

            # 2. –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –∞—É–¥–∏–æ —Å —É–º–Ω—ã–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —è–∑—ã–∫–∞
            text, detected_language = self.transcription_service.transcribe_with_fallback(
                audio_path,
                expected_language
            )

            if text.startswith("–û—à–∏–±–∫–∞"):
                return {
                    'success': False,
                    'error': text,
                    'transcription': '',
                    'detected_language': 'unknown',
                    'translation': None
                }

            # 3. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —è–∑—ã–∫–∞
            language_analysis = self.language_detector.analyze_language(text)
            final_language = self._choose_best_language(
                detected_language,
                language_analysis.get('language'),
                expected_language,
                language_analysis.get('confidence', 0)
            )

            # 3.5. üîß –£–õ–£–ß–®–ï–ù–ù–û–ï –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫—Ö–º–µ—Ä—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
            final_language = self._improve_khmer_detection(text, final_language)

            # 4. –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è –Ω–∞—Ç–∏–≤–Ω—ã—Ö —è–∑—ã–∫–æ–≤
            quality_analysis = self._analyze_transcription_quality(text, final_language)

            # 5. –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = {
                'success': True,
                'transcription': text,
                'original_text': text,  # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                'detected_language': final_language,
                'quality_analysis': quality_analysis,
                'language_info': self._get_language_info_safe(final_language)
            }

            # 6. –ü–µ—Ä–µ–≤–æ–¥–∏–º –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ
            if target_language and target_language != final_language:
                translation_result = self.translation_service.translate_text(
                    text, target_language, final_language
                )
                if translation_result.get('success'):
                    result['translation'] = translation_result.get('translated_text')
                    result['translated_text'] = translation_result.get('translated_text')  # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                    result['translation_target'] = target_language

            # 7. –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            self._cleanup_temp_files(file_path, audio_path)

            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ. –Ø–∑—ã–∫: {final_language}")
            return result

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ–¥–∏–∞: {e}")
            import traceback
            traceback.print_exc()

            # –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª—ã –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            if audio_path:
                self._cleanup_temp_files(file_path, audio_path)

            return {
                'success': False,
                'error': f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}',
                'transcription': '',
                'detected_language': 'unknown',
                'translation': None
            }

    def _choose_best_language(self, whisper_lang: str, detector_lang: str, expected_lang: Optional[str],
                              confidence: float) -> str:
        """–í—ã–±–∏—Ä–∞–µ—Ç –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã–π —è–∑—ã–∫ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–Ω–æ —É–∫–∞–∑–∞–ª —è–∑—ã–∫ –∏ confidence –≤—ã—Å–æ–∫–∏–π
        if expected_lang and confidence > 0.6:
            if expected_lang == detector_lang:
                return expected_lang

        # –ï—Å–ª–∏ Whisper –∏ –¥–µ—Ç–µ–∫—Ç–æ—Ä —Å–æ–≥–ª–∞—Å–Ω—ã
        if whisper_lang == detector_lang:
            return whisper_lang

        # –ï—Å–ª–∏ confidence –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –≤—ã—Å–æ–∫–∏–π
        if confidence > 0.7:
            return detector_lang

        # –ò–Ω–∞—á–µ –¥–æ–≤–µ—Ä—è–µ–º Whisper
        return whisper_lang

    # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ –º–µ—Ç–æ–¥—ã –≤ –≤–∞—à services/media_handler.py –ø–æ—Å–ª–µ –º–µ—Ç–æ–¥–∞ _choose_best_language

    def _improve_khmer_detection(self, text: str, detected_language: str) -> str:
        """
        –£–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫—Ö–º–µ—Ä—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
        """
        if not text:
            return detected_language

        text_lower = text.lower()

        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫—Ö–º–µ—Ä—Å–∫–∏—Ö Unicode —Å–∏–º–≤–æ–ª–æ–≤
        khmer_chars = sum(1 for char in text if '\u1780' <= char <= '\u17FF')
        total_chars = len([char for char in text if char.isalpha()])

        if total_chars > 0 and khmer_chars / total_chars > 0.1:
            logger.info(f"Detected Khmer by Unicode characters: {khmer_chars}/{total_chars}")
            return 'km'

        # 2. –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫—Ö–º–µ—Ä—Å–∫–∏—Ö —Å–ª–æ–≤ –≤ –ª–∞—Ç–∏–Ω—Å–∫–æ–π —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–∏
        khmer_keywords = [
            # –û—Å–Ω–æ–≤–Ω—ã–µ —Å–ª–æ–≤–∞
            'bong', 'avan', 'kue', 'vie', 'mien', 'dak', 'chun', 'neng',
            'phnom penh', 'kath', 'chui', 'tae', 'doi', 'knea', 'tam',
            'thap', 'reang', 'sva', 'kam', 'krong', 'tlai', 'vreak',

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫—Ö–º–µ—Ä—Å–∫–∏–µ —Å–ª–æ–≤–∞
            'thangay', 'penjad', 'kamong', 'tarak', 'titang', 'jom',
            'yung', 'knong', 'pya', 'okh', 'kaleng', 'cheung',
            'semeb', 'bannei', 'leak', 'piseh', 'temuy', 'peny', 'thol',
            'rohot', 'tadol', 'pahang', 'ngay', 'kalori', 'kaba', 'teet',
            'sosay', 'masin', 'rodh', 'pran', 'mak', 'jikan', 'phra',
            'trai', 'promoson', 'hoi', 'nesol', 'pophet',
            'thangon', 'ban', 'monitor', 'wilea', 'avey', 'kaha', 'tham',
            'bol', 'ksar', 'tieng', 'maku', 'deng', 'hit',

            # –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
            'cambodia', 'cambodian', 'kampong', 'siem reap', 'battambang',
            'angkor', 'mekong', 'tonle sap', 'phnom', 'penh',

            # –ß–∞—Å—Ç—ã–µ —Ñ—Ä–∞–∑—ã –≤ —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–∏
            'chum reap suor', 'arkun', 'som tos', 'ot te', 'mean',
            'min mean', 'chea', 'rous', 'laor', 'ning', 'haiy',

            # –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –∫—Ö–º–µ—Ä—Å–∫–∏–µ –∑–≤—É–∫–∏ –≤ –ª–∞—Ç–∏–Ω–∏—Ü–µ
            'susuday', 'ksabay', 'preab', 'srey', 'pros', 'kmean',
            'preah', 'vihear', 'wat', 'pagoda'
        ]

        # 3. –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∫—Ö–º–µ—Ä—Å–∫–∏—Ö —Å–ª–æ–≤
        khmer_word_count = 0
        found_words = []

        for keyword in khmer_keywords:
            if keyword in text_lower:
                khmer_word_count += 1
                found_words.append(keyword)

        total_words = len(text_lower.split())

        logger.info(f"Khmer keyword analysis:")
        logger.info(f"  Found keywords: {found_words}")
        logger.info(f"  Khmer keywords: {khmer_word_count}/{total_words}")
        logger.info(f"  Original detection: {detected_language}")

        # 4. –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ö–º–µ—Ä—Å–∫–∏—Ö —Å–ª–æ–≤, —Å—á–∏—Ç–∞–µ–º –∫—Ö–º–µ—Ä—Å–∫–∏–º
        if total_words > 0:
            khmer_ratio = khmer_word_count / total_words

            # –î–∞–∂–µ –æ–¥–Ω–æ –∫—Ö–º–µ—Ä—Å–∫–æ–µ —Å–ª–æ–≤–æ –∏–∑ 3+ –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –∫—Ö–º–µ—Ä—Å–∫–∏–π
            if khmer_word_count >= 1 and total_words <= 5:
                logger.info(f"Short text with Khmer keywords detected as Khmer")
                return 'km'

            # –î–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
            if khmer_ratio > 0.15:  # 15% –∫—Ö–º–µ—Ä—Å–∫–∏—Ö —Å–ª–æ–≤
                logger.info(f"High Khmer keyword ratio: {khmer_ratio:.2f} - detected as Khmer")
                return 'km'

        # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –∫—Ö–º–µ—Ä—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        khmer_patterns = [
            'susuday mo sa ksabay',  # –∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–∏–º–µ—Ä–∞
            'bong chui',
            'vie mien',
            'kue bong',
            'phnom penh',
            'arkun chea'
        ]

        for pattern in khmer_patterns:
            if pattern in text_lower:
                logger.info(f"Khmer pattern '{pattern}' found - detected as Khmer")
                return 'km'

        # 6. –ò—Å–∫–ª—é—á–∞–µ–º —Ç–∞–≥–∞–ª—å—Å–∫–∏–π –µ—Å–ª–∏ –µ—Å—Ç—å –∫—Ö–º–µ—Ä—Å–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        if detected_language == 'tl' and khmer_word_count > 0:
            logger.info(f"Changing from Tagalog to Khmer due to keywords")
            return 'km'

        return detected_language

    def _analyze_transcription_quality(self, text: str, language: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª—è –Ω–∞—Ç–∏–≤–Ω—ã—Ö —è–∑—ã–∫–æ–≤"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —è–∑—ã–∫ –∞–∑–∏–∞—Ç—Å–∫–∏–º/–Ω–∞—Ç–∏–≤–Ω—ã–º
            native_languages = ['km', 'th', 'zh', 'ja', 'ko', 'vi']

            if language in native_languages:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å
                analysis = self.native_script_service.analyze_script_quality(text, language)

                # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if 'message' not in analysis:
                    analysis['formatted_message'] = self.native_script_service.format_quality_message(
                        analysis, language
                    )

                return analysis
            else:
                # –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–æ–≤
                return {
                    'quality': 'good',
                    'native_ratio': 1.0,
                    'message': '‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ',
                    'has_transliteration': False
                }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–∞—á–µ—Å—Ç–≤–∞: {e}")
            return {
                'quality': 'unknown',
                'native_ratio': 0.0,
                'message': '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ',
                'error': str(e)
            }

    def _get_language_info_safe(self, detected_language: str) -> Dict[str, str]:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —è–∑—ã–∫–µ"""
        language_names = {
            'km': {'name': 'Khmer', 'native': '·ûÅ·üí·ûò·üÇ·ûö'},
            'en': {'name': 'English', 'native': 'English'},
            'ru': {'name': 'Russian', 'native': '–†—É—Å—Å–∫–∏–π'},
            'th': {'name': 'Thai', 'native': '‡πÑ‡∏ó‡∏¢'},
            'vi': {'name': 'Vietnamese', 'native': 'Ti·∫øng Vi·ªát'},
            'zh': {'name': 'Chinese', 'native': '‰∏≠Êñá'},
            'ja': {'name': 'Japanese', 'native': 'Êó•Êú¨Ë™û'},
            'ko': {'name': 'Korean', 'native': 'ÌïúÍµ≠Ïñ¥'},
            'ar': {'name': 'Arabic', 'native': 'ÿßŸÑÿπÿ±ÿ®Ÿäÿ©'},
            'hi': {'name': 'Hindi', 'native': '‡§π‡§ø‡§®‡•ç‡§¶‡•Ä'},
            'fr': {'name': 'French', 'native': 'Fran√ßais'},
            'es': {'name': 'Spanish', 'native': 'Espa√±ol'},
            'de': {'name': 'German', 'native': 'Deutsch'},
            'it': {'name': 'Italian', 'native': 'Italiano'},
            'pt': {'name': 'Portuguese', 'native': 'Portugu√™s'},
            'tl': {'name': 'Tagalog', 'native': 'Tagalog'}
        }
        return language_names.get(detected_language, {'name': detected_language.upper(), 'native': ''})

    @staticmethod
    def _cleanup_temp_files(original_path: str, processed_path: Optional[str]):
        """–û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
        try:
            # –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –∞—É–¥–∏–æ —Ñ–∞–π–ª –µ—Å–ª–∏ –æ–Ω –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
            if processed_path and processed_path != original_path and os.path.exists(processed_path):
                os.remove(processed_path)
                logger.debug(f"–£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {processed_path}")

            # –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
            if original_path and os.path.exists(original_path):
                os.remove(original_path)
                logger.debug(f"–£–¥–∞–ª–µ–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: {original_path}")

        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {e}")

    def validate_file(self, file_path: str, is_premium: bool = False) -> Tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–∞–π–ª –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º"""
        return self.audio_processor.validate_audio_file(file_path)

    @staticmethod
    def get_supported_formats() -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ñ–∞–π–ª–æ–≤"""
        return {
            'audio': ['mp3', 'wav', 'ogg', 'm4a', 'aac', 'flac'],
            'video': ['mp4', 'avi', 'mov', 'mkv', 'webm'],
            'max_duration_free': 300,  # 5 –º–∏–Ω—É—Ç –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            'max_duration_premium': 3600,  # 60 –º–∏–Ω—É—Ç –¥–ª—è –ø—Ä–µ–º–∏—É–º
            'max_file_size': 50 * 1024 * 1024  # 50MB
        }