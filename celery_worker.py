# celery_worker.py - –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø
import os
import logging
import requests
from celery import Celery
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç—ã –≤–∞—à–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
from services.media_handler import MediaHandler
from services.transcription_service import TranscriptionService
from services.translation_service import TranslationService
from services.database import Database
from services.audio_processor import AudioProcessor

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Celery
redis_url = os.getenv('REDIS_URL')
if not redis_url:
    raise RuntimeError("REDIS_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
celery_app = Celery('tasks', broker=redis_url, backend=redis_url)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤, –Ω—É–∂–Ω—ã—Ö –≤–æ—Ä–∫–µ—Ä—É
try:
    transcription_service = TranscriptionService()
    translation_service = TranslationService()
    database = Database()
    media_handler = MediaHandler(transcription_service, translation_service)
    audio_processor = AudioProcessor()
    PAGE_ACCESS_TOKEN = os.getenv('PAGE_ACCESS_TOKEN')
    logger.info("Celery –≤–æ—Ä–∫–µ—Ä: –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.")
except Exception as e:
    logger.error(f"Celery –≤–æ—Ä–∫–µ—Ä: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò: {e}", exc_info=True)
    media_handler = None

def send_messenger_message(recipient_id: str, message_text: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç –∏–º–µ–Ω–∏ –≤–æ—Ä–∫–µ—Ä–∞."""
    if not PAGE_ACCESS_TOKEN:
        logger.error("PAGE_ACCESS_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return
    try:
        payload = {
            'recipient': {'id': recipient_id},
            'messaging_type': 'MESSAGE_TAG',
            'message': {'text': message_text},
            'tag': 'POST_PURCHASE_UPDATE',
            'access_token': PAGE_ACCESS_TOKEN
        }
        response = requests.post("https://graph.facebook.com/v18.0/me/messages", json=payload, timeout=10)
        response.raise_for_status()
        logger.info(f"–í–æ—Ä–∫–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient_id}")
    except Exception as e:
        logger.error(f"–í–æ—Ä–∫–µ—Ä –Ω–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient_id}: {e}", exc_info=True)

@celery_app.task(bind=True, name='tasks.process_media', max_retries=2, default_retry_delay=60)
def process_media_task(self, sender_id: str, file_path: str, user_preferences: dict):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ Celery –¥–ª—è —Ç—è–∂–µ–ª–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞."""
    logger.info(f"[{self.request.id}] –ù–∞—á–∞–ª–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {sender_id}")
    if not media_handler:
        logger.error(f"[{self.request.id}] MediaHandler –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –∑–∞–¥–∞—á–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞.")
        send_messenger_message(sender_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    try:
        result = media_handler.process_media(file_path, user_preferences)
        if result.get('success'):
            lang_info = result.get('language_info', {})
            lang_name = lang_info.get('name', result.get('detected_language', ''))
            response_text = f"üéØ –Ø–∑—ã–∫: {lang_name}\n\nüìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:\n{result['transcription']}"
            send_messenger_message(sender_id, response_text)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            database.save_transcription(user_id=sender_id, **result)
            database.increment_usage(user_id=sender_id)
        else:
            send_messenger_message(sender_id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à —Ñ–∞–π–ª. –û—à–∏–±–∫–∞: {result.get('error', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
    except Exception as exc:
        logger.error(f"[{self.request.id}] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ Celery: {exc}", exc_info=True)
        send_messenger_message(sender_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞.")
        raise self.retry(exc=exc)
    finally:
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        original_file = result.get('original_file_path') if 'result' in locals() else file_path
        processed_file = result.get('processed_audio_path') if 'result' in locals() else None
        audio_processor.cleanup_temp_file(original_file)
        if processed_file and processed_file != original_file:
            audio_processor.cleanup_temp_file(processed_file)
        logger.info(f"[{self.request.id}] –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã.")