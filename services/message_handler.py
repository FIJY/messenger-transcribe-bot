# services/message_handler.py - –ü–û–õ–ù–ê–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
import logging
import requests
import os
import time
from typing import Dict, Any, Optional, List
from .media_handler import MediaHandler
from .database import Database
from .translation_service import TranslationService

logger = logging.getLogger(__name__)


class MessageHandler:
    def __init__(self, media_handler: MediaHandler, database: Database, translation_service: TranslationService):
        self.media_handler = media_handler
        self.database = database
        self.translation_service = translation_service
        self.page_access_token = os.getenv('PAGE_ACCESS_TOKEN')

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏–º–∏—Ç–æ–≤
        self.FREE_DAILY_LIMIT = int(os.getenv('FREE_DAILY_LIMIT', '9998'))
        self.PREMIUM_DAILY_LIMIT = int(os.getenv('PREMIUM_DAILY_LIMIT', '9999'))

    def handle_message(self, message_data: Dict[str, Any]) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            sender_id = message_data.get('sender', {}).get('id')
            message = message_data.get('message', {})

            if not sender_id:
                logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç sender_id –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏")
                return False

            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {sender_id}")

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user = self.database.get_user(sender_id)
            if not user:
                user = self.database.create_user(sender_id)
                self._send_welcome_message(sender_id)
                return True

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
            if not self._check_usage_limits(user):
                self._send_limit_exceeded_message(sender_id, user)
                return True

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if 'text' in message:
                return self._handle_text_message(sender_id, message['text'], user)

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–ª–æ–∂–µ–Ω–∏—è (–∞—É–¥–∏–æ/–≤–∏–¥–µ–æ)
            if 'attachments' in message:
                return self._handle_attachments(sender_id, message['attachments'], user)

            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
            self._send_text_message(sender_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∞—É–¥–∏–æ –∏ –≤–∏–¥–µ–æ —Ñ–∞–π–ª—ã.")
            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            self._send_error_message(sender_id if 'sender_id' in locals() else None)
            return False

    def _handle_text_message(self, sender_id: str, text: str, user: Dict[str, Any]) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        text_lower = text.lower().strip()

        # üîß –ù–û–í–û–ï: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
        if text.startswith('RETRY_LANG_'):
            return self._handle_language_retry(sender_id, text, user)

        if text == 'LANG_CORRECT':
            self._send_text_message(sender_id, "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ!")
            return True

        # –ö–æ–º–∞–Ω–¥—ã –ø–æ–º–æ—â–∏
        if any(keyword in text_lower for keyword in
               ['help', '–ø–æ–º–æ—â—å', '—Å–ø—Ä–∞–≤–∫–∞', '/start', 'start', '–ø—Ä–∏–≤–µ—Ç', 'hello']):
            self._send_help_message(sender_id)
            return True

        # –ö–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        if any(keyword in text_lower for keyword in ['stats', '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '–ª–∏–º–∏—Ç']):
            self._send_stats_message(sender_id, user)
            return True

        # –ö–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–≤–æ–¥–∞
        if self._is_translation_request(text_lower):
            return self._handle_translation_request(sender_id, text, user)

        # –û–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        response = "üéôÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∞—É–¥–∏–æ –∏–ª–∏ –≤–∏–¥–µ–æ —Ñ–∞–π–ª –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏!\n\n"
        response += "üìù –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
        response += "‚Ä¢ –ê—É–¥–∏–æ: MP3, WAV, OGG, M4A, AAC, FLAC\n"
        response += "‚Ä¢ –í–∏–¥–µ–æ: MP4, AVI, MOV, MKV, WEBM\n\n"
        response += "‚è±Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 5 –º–∏–Ω—É—Ç"

        self._send_text_message(sender_id, response)
        return True

    def _handle_language_retry(self, sender_id: str, payload: str, user: Dict[str, Any]) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —è–∑—ã–∫–æ–º"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ —è–∑—ã–∫–∞ –∏–∑ payload
            language_code = payload.replace('RETRY_LANG_', '').lower()

            language_map = {
                'km': 'km',
                'th': 'th',
                'vi': 'vi',
                'en': 'en'
            }

            target_language = language_map.get(language_code)
            if not target_language:
                self._send_text_message(sender_id, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —è–∑—ã–∫")
                return True

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∞—É–¥–∏–æ
            retry_info = self.database.get_retry_info(sender_id)
            if not retry_info:
                self._send_text_message(sender_id, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞—É–¥–∏–æ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ñ–∞–π–ª.")
                return True

            self._send_text_message(sender_id,
                                    f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å —è–∑—ã–∫–æ–º: {self._get_language_name(target_language)}")

            # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞—É–¥–∏–æ —Ñ–∞–π–ª
            # –ü–æ—Å–∫–æ–ª—å–∫—É —Ñ–∞–π–ª —É–∂–µ —É–¥–∞–ª–µ–Ω, –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–Ω–æ–≤–∞
            self._send_text_message(sender_id,
                                    "üéôÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª —Å–Ω–æ–≤–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —è–∑—ã–∫–æ–º.")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ —è–∑—ã–∫–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            self.database.set_user_language_preference(sender_id, target_language)

            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å —è–∑—ã–∫–æ–º: {e}")
            self._send_text_message(sender_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ")
            return True

    def _get_language_name(self, code: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞ –ø–æ –∫–æ–¥—É"""
        names = {
            'km': 'üá∞üá≠ –ö—Ö–º–µ—Ä—Å–∫–∏–π',
            'th': 'üáπüá≠ –¢–∞–π—Å–∫–∏–π',
            'vi': 'üáªüá≥ –í—å–µ—Ç–Ω–∞–º—Å–∫–∏–π',
            'en': 'üá∫üá∏ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π'
        }
        return names.get(code, code.upper())

    def _handle_attachments(self, sender_id: str, attachments: List[Dict], user: Dict[str, Any]) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–ª–æ–∂–µ–Ω–∏—è (–∞—É–¥–∏–æ/–≤–∏–¥–µ–æ —Ñ–∞–π–ª—ã)"""
        for attachment in attachments:
            attachment_type = attachment.get('type')

            if attachment_type in ['audio', 'video']:
                return self._process_media_attachment(sender_id, attachment, user)
            elif attachment_type == 'file':
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –º–µ–¥–∏–∞
                payload = attachment.get('payload', {})
                url = payload.get('url')
                if url and any(ext in url.lower() for ext in ['.mp3', '.wav', '.mp4', '.avi']):
                    return self._process_media_attachment(sender_id, attachment, user)

        self._send_text_message(sender_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ –∏–ª–∏ –≤–∏–¥–µ–æ —Ñ–∞–π–ª –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏.")
        return True

    def _process_media_attachment(self, sender_id: str, attachment: Dict, user: Dict[str, Any]) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–µ–¥–∏–∞ –≤–ª–æ–∂–µ–Ω–∏–µ - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            self._send_processing_message(sender_id)

            # –ü–æ–ª—É—á–∞–µ–º URL —Ñ–∞–π–ª–∞
            payload = attachment.get('payload', {})
            file_url = payload.get('url')

            if not file_url:
                self._send_text_message(sender_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª.")
                return False

            # –°–∫–∞—á–∏–≤–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª
            result = self._download_and_process_media(file_url, user.get('is_premium', False), user)

            if not result['success']:
                self._send_text_message(sender_id, f"‚ùå {result['error']}")
                return False

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            self.database.save_transcription(
                user_id=sender_id,
                transcription=result['transcription'],
                detected_language=result['detected_language'],
                file_type=attachment.get('type', 'unknown')
            )

            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            self.database.increment_usage(sender_id)

            # üîß –ù–û–í–û–ï: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
            self._send_transcription_with_language_buttons(sender_id, result)

            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            self._send_translation_offer(sender_id, result, user)

            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ–¥–∏–∞ –≤–ª–æ–∂–µ–Ω–∏—è: {e}")
            self._send_text_message(sender_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞.")
            return False

    def _download_and_process_media(self, file_url: str, is_premium: bool = False, user: Dict[str, Any] = None) -> Dict[
        str, Any]:
        """–°–∫–∞—á–∏–≤–∞–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–µ–¥–∏–∞ —Ñ–∞–π–ª"""
        try:
            import tempfile
            import requests

            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            headers = {'Authorization': f'Bearer {self.page_access_token}'}
            response = requests.get(file_url, headers=headers, timeout=30)
            response.raise_for_status()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(delete=False, suffix='.tmp') as temp_file:
                temp_file.write(response.content)
                temp_file_path = temp_file.name

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª
            is_valid, error_msg = self.media_handler.validate_file(temp_file_path, is_premium)
            if not is_valid:
                os.remove(temp_file_path)
                return {'success': False, 'error': error_msg}

            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_preferences = self._get_user_preferences(user) if user else None

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª
            result = self.media_handler.process_media(temp_file_path, user_preferences)

            return result

        except requests.RequestException as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
            return {'success': False, 'error': '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª'}
        except Exception as e:
            logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ–¥–∏–∞: {e}")
            return {'success': False, 'error': f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}'}

    def _get_user_preferences(self, user: Dict[str, Any]) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return {
            'language': user.get('preferred_language'),
            'auto_translate': user.get('auto_translate', False),
            'target_language': user.get('target_language', 'en')
        }

    def _should_show_language_correction_buttons(self, result: Dict[str, Any]) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —è–∑—ã–∫–∞"""
        detected_lang = result.get('detected_language', 'unknown')
        quality_analysis = result.get('quality_analysis', {})
        transcription = result.get('transcription', '')

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –µ—Å–ª–∏:
        # 1. –û–±–Ω–∞—Ä—É–∂–µ–Ω –∞–Ω–≥–ª–∏–π—Å–∫–∏–π, –Ω–æ –µ—Å—Ç—å –ø–æ–¥–æ–∑—Ä–µ–Ω–∏—è –Ω–∞ –∞–∑–∏–∞—Ç—Å–∫–∏–π —è–∑—ã–∫
        # 2. –ö–∞—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –ø–ª–æ—Ö–æ–µ
        # 3. –¢–µ–∫—Å—Ç –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è

        if detected_lang == 'en':
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∞–Ω–≥–ª–∏–π—Å–∫–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∞–∑–∏–∞—Ç—Å–∫–∏—Ö —è–∑—ã–∫–æ–≤
            suspicious_patterns = [
                'so what', 'check', 'progress', 'course', 'just', 'who packed',
                'thank you', 'you know', 'right now', 'i think', 'what do you',
                'how are you', 'good morning', 'thank', 'please', 'sorry'
            ]

            text_lower = transcription.lower()
            if any(pattern in text_lower for pattern in suspicious_patterns):
                return True

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—Å–ª–∏ –∫–∞—á–µ—Å—Ç–≤–æ –ø–ª–æ—Ö–æ–µ
        if quality_analysis.get('quality') in ['poor', 'mixed']:
            return True

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—Å–ª–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∞—è –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Ç–æ—á–Ω–æ–π
        if len(transcription.split()) <= 3:
            return True

        return False

    def _send_transcription_with_language_buttons(self, sender_id: str, result: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ"""

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        response = self._format_transcription_response(result)
        self._send_text_message(sender_id, response)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω—ã –ª–∏ –∫–Ω–æ–ø–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —è–∑—ã–∫–∞
        if self._should_show_language_correction_buttons(result):
            self._send_language_correction_buttons(sender_id, result)

    def _send_language_correction_buttons(self, sender_id: str, result: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —è–∑—ã–∫–∞"""
        try:
            url = f"https://graph.facebook.com/v17.0/me/messages"

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            self._store_last_audio_for_retry(sender_id, result)

            quick_replies = [
                {
                    "content_type": "text",
                    "title": "üá∞üá≠ ·ûÅ·üí·ûò·üÇ·ûö",
                    "payload": "RETRY_LANG_KM"
                },
                {
                    "content_type": "text",
                    "title": "üáπüá≠ ‡πÑ‡∏ó‡∏¢",
                    "payload": "RETRY_LANG_TH"
                },
                {
                    "content_type": "text",
                    "title": "üáªüá≥ Ti·∫øng Vi·ªát",
                    "payload": "RETRY_LANG_VI"
                },
                {
                    "content_type": "text",
                    "title": "üá∫üá∏ English",
                    "payload": "RETRY_LANG_EN"
                },
                {
                    "content_type": "text",
                    "title": "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ",
                    "payload": "LANG_CORRECT"
                }
            ]

            payload = {
                'recipient': {'id': sender_id},
                'message': {
                    'text': "ü§î –Ø–∑—ã–∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ? –ï—Å–ª–∏ –Ω–µ—Ç, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π:",
                    'quick_replies': quick_replies
                },
                'access_token': self.page_access_token
            }

            response = requests.post(url, json=payload, timeout=10)
            response.raise_for_status()

            logger.info(f"–ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {sender_id}")
            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–Ω–æ–ø–æ–∫ —è–∑—ã–∫–∞: {e}")
            return False

    def _store_last_audio_for_retry(self, sender_id: str, result: Dict[str, Any]):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∞—É–¥–∏–æ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        # –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –≤ –ø–∞–º—è—Ç–∏
        try:
            self.database.store_retry_info(sender_id, {
                'transcription': result.get('transcription'),
                'detected_language': result.get('detected_language'),
                'timestamp': str(int(time.time()))
            })
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ retry info: {e}")

    def _format_transcription_response(self, result: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏"""
        detected_lang = result.get('detected_language', 'unknown')
        transcription = result.get('transcription', '')
        language_info = result.get('language_info', {})
        quality_analysis = result.get('quality_analysis', {})

        # –ò–∫–æ–Ω–∫–∏ –¥–ª—è —è–∑—ã–∫–æ–≤
        language_icons = {
            'km': 'üá∞üá≠', 'th': 'üáπüá≠', 'vi': 'üáªüá≥', 'zh': 'üá®üá≥', 'ja': 'üáØüáµ',
            'ko': 'üá∞üá∑', 'en': 'üá∫üá∏', 'ru': 'üá∑üá∫', 'fr': 'üá´üá∑', 'es': 'üá™üá∏',
            'de': 'üá©üá™', 'ar': 'üá∏üá¶', 'hi': 'üáÆüá≥', 'it': 'üáÆüáπ', 'pt': 'üáµüáπ'
        }

        icon = language_icons.get(detected_lang, 'üåê')
        lang_name = language_info.get('name', detected_lang.upper())
        native_name = language_info.get('native', '')

        response = f"üéØ **–Ø–∑—ã–∫:** {icon} {lang_name}"
        if native_name and native_name != lang_name:
            response += f" ({native_name})"

        response += "\n\nüìù **–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:**\n" + transcription

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—á–µ—Å—Ç–≤–µ –¥–ª—è –Ω–∞—Ç–∏–≤–Ω—ã—Ö —è–∑—ã–∫–æ–≤
        if quality_analysis.get('message'):
            response += f"\n\n{quality_analysis['message']}"

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ –µ—Å–ª–∏ –µ—Å—Ç—å
        if 'translated_text' in result:
            target_lang = result.get('translation_target', 'en')
            target_info = self._get_language_info_safe(target_lang)
            target_name = target_info.get('name', target_lang.upper())

            response += f"\n\nüîÑ **–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ {target_name}:**\n{result['translated_text']}"

        return response

    def _get_language_info_safe(self, language: str) -> Dict[str, str]:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —è–∑—ã–∫–µ"""
        language_names = {
            'km': {'name': '–ö—Ö–º–µ—Ä—Å–∫–∏–π', 'native': '·ûÅ·üí·ûò·üÇ·ûö'},
            'en': {'name': '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π', 'native': 'English'},
            'ru': {'name': '–†—É—Å—Å–∫–∏–π', 'native': '–†—É—Å—Å–∫–∏–π'},
            'th': {'name': '–¢–∞–π—Å–∫–∏–π', 'native': '‡πÑ‡∏ó‡∏¢'},
            'vi': {'name': '–í—å–µ—Ç–Ω–∞–º—Å–∫–∏–π', 'native': 'Ti·∫øng Vi·ªát'},
            'zh': {'name': '–ö–∏—Ç–∞–π—Å–∫–∏–π', 'native': '‰∏≠Êñá'},
            'ja': {'name': '–Ø–ø–æ–Ω—Å–∫–∏–π', 'native': 'Êó•Êú¨Ë™û'},
            'ko': {'name': '–ö–æ—Ä–µ–π—Å–∫–∏–π', 'native': 'ÌïúÍµ≠Ïñ¥'},
            'ar': {'name': '–ê—Ä–∞–±—Å–∫–∏–π', 'native': 'ÿßŸÑÿπÿ±ÿ®Ÿäÿ©'},
            'hi': {'name': '–•–∏–Ω–¥–∏', 'native': '‡§π‡§ø‡§®‡•ç‡§¶‡•Ä'},
            'fr': {'name': '–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π', 'native': 'Fran√ßais'},
            'es': {'name': '–ò—Å–ø–∞–Ω—Å–∫–∏–π', 'native': 'Espa√±ol'},
            'de': {'name': '–ù–µ–º–µ—Ü–∫–∏–π', 'native': 'Deutsch'},
        }
        return language_names.get(language, {'name': language.upper(), 'native': ''})

    def _send_translation_offer(self, sender_id: str, result: Dict[str, Any], user: Dict[str, Any]):
        """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–µ—Ä–µ–≤–æ–¥ –µ—Å–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —É—Å–ª–æ–≤–∏—è"""
        detected_lang = result.get('detected_language', 'unknown')
        user_lang = user.get('preferred_language', 'en')

        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è –∞–∑–∏–∞—Ç—Å–∫–∏—Ö —è–∑—ã–∫–æ–≤
        if detected_lang in ['km', 'th', 'vi', 'zh', 'ja', 'ko'] and user_lang in ['en', 'ru']:
            suggestions = {
                'en': "üí° Need translation? Type 'translate to english'",
                'ru': "üí° –ù—É–∂–µ–Ω –ø–µ—Ä–µ–≤–æ–¥? –ù–∞–ø–∏—à–∏—Ç–µ '–ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π'"
            }

            suggestion = suggestions.get(user_lang, suggestions['en'])
            self._send_text_message(sender_id, suggestion)

    def _handle_translation_request(self, sender_id: str, text: str, user: Dict[str, Any]) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥"""
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        last_transcription = self.database.get_last_transcription(sender_id)

        if not last_transcription:
            self._send_text_message(sender_id, "‚ùå –ù–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ –∏–ª–∏ –≤–∏–¥–µ–æ.")
            return True

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–π —è–∑—ã–∫
        target_lang = self._extract_target_language(text)
        if not target_lang:
            self._send_text_message(sender_id,
                                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —è–∑—ã–∫ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: 'translate to english'")
            return True

        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
        try:
            translation_result = self.translation_service.translate_text(
                last_transcription['transcription'],
                target_lang,
                last_transcription['detected_language']
            )

            if translation_result.get('success'):
                target_info = self._get_language_info_safe(target_lang)
                target_name = target_info.get('name', target_lang.upper())

                response = f"üîÑ **–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ {target_name}:**\n{translation_result['translated_text']}"
                self._send_text_message(sender_id, response)
            else:
                self._send_text_message(sender_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥.")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: {e}")
            self._send_text_message(sender_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ.")

        return True

    def _is_translation_request(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥"""
        translation_keywords = [
            'translate', '–ø–µ—Ä–µ–≤–µ—Å—Ç–∏', 'translation', '–ø–µ—Ä–µ–≤–æ–¥',
            '·ûî·ûÄ·ûî·üí·ûö·üÇ', '‡πÅ‡∏õ‡∏•', 'd·ªãch', 'ÁøªËØë', 'Î≤àÏó≠'
        ]
        return any(keyword in text for keyword in translation_keywords)

    def _extract_target_language(self, text: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ü–µ–ª–µ–≤–æ–π —è–∑—ã–∫ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞"""
        text_lower = text.lower()

        language_mappings = {
            'english': 'en', '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π': 'en', 'en': 'en',
            'russian': 'ru', '—Ä—É—Å—Å–∫–∏–π': 'ru', 'ru': 'ru',
            'khmer': 'km', 'cambodian': 'km', '–∫—Ö–º–µ—Ä—Å–∫–∏–π': 'km', 'km': 'km',
            'thai': 'th', '—Ç–∞–π—Å–∫–∏–π': 'th', 'th': 'th',
            'vietnamese': 'vi', '–≤—å–µ—Ç–Ω–∞–º—Å–∫–∏–π': 'vi', 'vi': 'vi',
            'chinese': 'zh', '–∫–∏—Ç–∞–π—Å–∫–∏–π': 'zh', 'zh': 'zh'
        }

        for lang_name, lang_code in language_mappings.items():
            if lang_name in text_lower:
                return lang_code

        return None

    def _check_usage_limits(self, user: Dict[str, Any]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏–º–∏—Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        daily_usage = user.get('daily_usage', 0)
        is_premium = user.get('is_premium', False)

        limit = self.PREMIUM_DAILY_LIMIT if is_premium else self.FREE_DAILY_LIMIT

        return daily_usage < limit

    def _send_welcome_message(self, sender_id: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        message = """üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Transcribe Bot!

üéôÔ∏è –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ –∏ –≤–∏–¥–µ–æ —Ñ–∞–π–ª—ã.

üìù **–ß—Ç–æ —è —É–º–µ—é:**
‚Ä¢ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –∏–∑ –∞—É–¥–∏–æ/–≤–∏–¥–µ–æ
‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 50+ —è–∑—ã–∫–æ–≤
‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –¥—Ä—É–≥–∏–µ —è–∑—ã–∫–∏

üöÄ **–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∞—É–¥–∏–æ –∏–ª–∏ –≤–∏–¥–µ–æ —Ñ–∞–π–ª!**

‚ÑπÔ∏è –õ–∏–º–∏—Ç: 10 —Ñ–∞–π–ª–æ–≤ –≤ –¥–µ–Ω—å (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)"""

        self._send_text_message(sender_id, message)

    def _send_help_message(self, sender_id: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏"""
        message = """üìñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:**

üéôÔ∏è **–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ/–≤–∏–¥–µ–æ** –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
üìù **–§–æ—Ä–º–∞—Ç—ã:** MP3, WAV, OGG, M4A, AAC, FLAC, MP4, AVI, MOV, MKV, WEBM
‚è±Ô∏è **–õ–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏:** 5 –º–∏–Ω—É—Ç (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)

üîÑ **–ü–µ—Ä–µ–≤–æ–¥:** –ù–∞–ø–∏—à–∏—Ç–µ "translate to [—è–∑—ã–∫]" –ø–æ—Å–ª–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏

üìä **–ö–æ–º–∞–Ω–¥—ã:**
‚Ä¢ "stats" - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
‚Ä¢ "help" - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üíé **Premium:** –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–æ 60 –º–∏–Ω—É—Ç"""

        self._send_text_message(sender_id, message)

    def _send_stats_message(self, sender_id: str, user: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        daily_usage = user.get('daily_usage', 0)
        total_transcriptions = user.get('total_transcriptions', 0)
        is_premium = user.get('is_premium', False)

        limit = self.PREMIUM_DAILY_LIMIT if is_premium else self.FREE_DAILY_LIMIT
        remaining = max(0, limit - daily_usage)

        status = "üíé Premium" if is_premium else "üÜì Free"

        message = f"""üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**

üë§ **–°—Ç–∞—Ç—É—Å:** {status}
üìà **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è:** {daily_usage}/{limit}
üéØ **–û—Å—Ç–∞–ª–æ—Å—å:** {remaining}
üìù **–í—Å–µ–≥–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π:** {total_transcriptions}

‚è∞ **–õ–∏–º–∏—Ç—ã —Å–±—Ä–∞—Å—ã–≤–∞—é—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:00 UTC**"""

        self._send_text_message(sender_id, message)

    def _send_limit_exceeded_message(self, sender_id: str, user: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞"""
        is_premium = user.get('is_premium', False)

        if is_premium:
            message = "‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç Premium (1000 —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π)."
        else:
            message = """‚ùå **–ü—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç (10 —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π)**

üíé **Upgrade to Premium:**
‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
‚Ä¢ –§–∞–π–ª—ã –¥–æ 60 –º–∏–Ω—É—Ç  
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞

‚è∞ **–ò–ª–∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ –¥–æ –∑–∞–≤—Ç—Ä–∞** - –ª–∏–º–∏—Ç—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –≤ 00:00 UTC"""

        self._send_text_message(sender_id, message)

    def _send_processing_message(self, sender_id: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        messages = [
            "üéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à —Ñ–∞–π–ª...",
            "üéØ Processing your file...",
            "üéØ ·ûÄ·üÜ·ûñ·ûª·ûÑ·ûä·üÜ·ûé·ûæ·ûö·ûÄ·û∂·ûö..."
        ]

        message = " / ".join(messages)
        self._send_text_message(sender_id, message)

    def _send_error_message(self, sender_id: Optional[str]):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        if sender_id:
            message = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            self._send_text_message(sender_id, message)

    def _send_text_message(self, recipient_id: str, message: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            url = f"https://graph.facebook.com/v17.0/me/messages"

            payload = {
                'recipient': {'id': recipient_id},
                'message': {'text': message},
                'access_token': self.page_access_token
            }

            response = requests.post(url, json=payload, timeout=10)
            response.raise_for_status()

            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient_id}")
            return True

        except requests.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False