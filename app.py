# app.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
import os
import logging
from flask import Flask, request, jsonify
import hmac
import hashlib
from datetime import datetime

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
try:
    from dotenv import load_dotenv

    load_dotenv()
    logging.info("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ .env —Ñ–∞–π–ª–∞")
except ImportError:
    logging.warning("‚ö†Ô∏è python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ")
except Exception as e:
    logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å .env —Ñ–∞–π–ª: {e}")

# –ò–º–ø–æ—Ä—Ç—ã —Å–µ—Ä–≤–∏—Å–æ–≤
from services.transcription_service import TranscriptionService
from services.translation_service import TranslationService
from services.media_handler import MediaHandler
from services.message_handler import MessageHandler
from services.database import Database

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Flask(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
transcription_service = None
translation_service = None
media_handler = None
message_handler = None
database = None


def init_services():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
    global transcription_service, translation_service, media_handler, message_handler, database

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã...")

        transcription_service = TranscriptionService()
        translation_service = TranslationService()
        database = Database()

        # MediaHandler —Ç—Ä–µ–±—É–µ—Ç transcription_service –∏ translation_service
        media_handler = MediaHandler(transcription_service, translation_service)

        # MessageHandler —Ç—Ä–µ–±—É–µ—Ç media_handler, database –∏ translation_service
        message_handler = MessageHandler(media_handler, database, translation_service)

        logger.info("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
        raise


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
init_services()


@app.route('/', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    return jsonify({
        'status': 'Bot is running',
        'message': 'Messenger Transcribe Bot is active',
        'version': '1.0.0',
        'endpoints': {
            'health': '/api/health',
            'webhook': '/webhook'
        }
    })


@app.route('/api/health', methods=['GET'])
def api_health():
    """API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if database:
            database.client.admin.command('ping')
            db_status = "connected"
        else:
            db_status = "not_initialized"

        return jsonify({
            'status': 'healthy',
            'database': db_status,
            'services': {
                'transcription': transcription_service is not None,
                'translation': translation_service is not None,
                'media_handler': media_handler is not None,
                'message_handler': message_handler is not None
            }
        })
    except Exception as e:
        logger.error(f"Health check failed: {e}")
        return jsonify({
            'status': 'unhealthy',
            'error': str(e)
        }), 500


@app.route('/webhook', methods=['GET'])
def webhook_verify():
    """–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è webhook –¥–ª—è Facebook"""
    try:
        verify_token = os.getenv('VERIFY_TOKEN', '12345')

        if request.args.get('hub.verify_token') == verify_token:
            logger.info("Webhook —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")
            return request.args.get('hub.challenge', '')
        else:
            logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π verify token")
            return 'Verification failed', 403

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ webhook: {e}")
        return 'Verification error', 500


@app.route('/webhook', methods=['POST'])
def webhook_handler():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Facebook"""
    try:
        data = request.get_json()
        if not verify_webhook_signature(request):
            logger.warning("–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å webhook")
            return 'Invalid signature', 403

        if data.get('object') == 'page':
            for entry in data.get('entry', []):
                for messaging_event in entry.get('messaging', []):
                    if message_handler:
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                        message_handler.handle_message(messaging_event)
                    else:
                        logger.error("MessageHandler –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –Ω–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ.")

        return 'OK', 200

    except Exception as e:
        # üîß –ì–õ–ê–í–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï:
        # exc_info=True –¥–æ–±–∞–≤–∏—Ç –≤ –ª–æ–≥ –ø–æ–ª–Ω—É—é —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É –æ—à–∏–±–∫–∏.
        # –≠—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç–æ, —á—Ç–æ –Ω–∞–º –Ω—É–∂–Ω–æ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ webhook_handler: {e}", exc_info=True)
        return 'OK', 200 # –í–æ–∑–≤—Ä–∞—â–∞–µ–º 200, —á—Ç–æ–±—ã Facebook –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª –∑–∞–ø—Ä–æ—Å—ã


def verify_webhook_signature(request):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å—å webhook –æ—Ç Facebook"""
    try:
        app_secret = os.getenv('APP_SECRET')
        if not app_secret:
            logger.warning("APP_SECRET –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∏")
            return True

        signature = request.headers.get('X-Hub-Signature-256', '')
        if not signature:
            logger.warning("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–ø–∏—Å—å –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö")
            return True

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å 'sha256='
        signature = signature.replace('sha256=', '')

        # –í—ã—á–∏—Å–ª—è–µ–º –æ–∂–∏–¥–∞–µ–º—É—é –ø–æ–¥–ø–∏—Å—å
        expected_signature = hmac.new(
            app_secret.encode('utf-8'),
            request.get_data(),
            hashlib.sha256
        ).hexdigest()

        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∏
        return hmac.compare_digest(signature, expected_signature)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏: {e}")
        return False


@app.route('/test', methods=['GET'])
def test_services():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤"""
    try:
        results = {}

        # –¢–µ—Å—Ç TranscriptionService
        if transcription_service:
            supported_langs = transcription_service.get_supported_languages()
            results['transcription'] = {
                'status': 'ok',
                'supported_languages_count': len(supported_langs)
            }
        else:
            results['transcription'] = {'status': 'not_initialized'}

        # –¢–µ—Å—Ç TranslationService
        if translation_service:
            test_translation = translation_service.translate_text("Hello", "ru", "en")
            results['translation'] = {
                'status': 'ok' if test_translation.get('success') else 'error',
                'test_result': test_translation
            }
        else:
            results['translation'] = {'status': 'not_initialized'}

        # –¢–µ—Å—Ç Database
        if database:
            try:
                stats = database.get_global_stats()
                results['database'] = {
                    'status': 'ok',
                    'global_stats': stats
                }
            except Exception as e:
                results['database'] = {
                    'status': 'error',
                    'error': str(e)
                }
        else:
            results['database'] = {'status': 'not_initialized'}

        return jsonify({
            'test_results': results,
            'timestamp': str(datetime.utcnow())
        })

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return jsonify({
            'error': str(e),
            'timestamp': str(datetime.utcnow())
        }), 500


if __name__ == '__main__':
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    required_env_vars = [
        'OPENAI_API_KEY',
        'MONGODB_URI',
        'PAGE_ACCESS_TOKEN',
        'VERIFY_TOKEN'
    ]

    missing_vars = [var for var in required_env_vars if not os.getenv(var)]
    if missing_vars:
        logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {missing_vars}")
        exit(1)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    port = int(os.getenv('PORT', 5000))
    debug = os.getenv('FLASK_ENV') == 'development'

    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    app.run(host='0.0.0.0', port=port, debug=debug)