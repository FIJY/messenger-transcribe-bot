# services/message_handler.py
import logging
import os
import requests
from typing import Dict, Any, List, Optional
from celery import Celery

from .database import Database

logger = logging.getLogger(__name__)

redis_url = os.getenv('REDIS_URL')
if not redis_url:
    logger.warning("REDIS_URL –Ω–µ –Ω–∞–π–¥–µ–Ω, Celery –∫–ª–∏–µ–Ω—Ç –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.")
    celery_app_client = None
else:
    celery_app_client = Celery('tasks_client', broker=redis_url)


class MessageHandler:
    def __init__(self, database: Database):
        self.database = database
        self.page_access_token = os.getenv('PAGE_ACCESS_TOKEN')

    def handle_message(self, webhook_event: Dict[str, Any]):
        try:
            entry = webhook_event.get('entry', [])
            if not entry: return
            messaging = entry[0].get('messaging', [])
            if not messaging: return
            messaging_event = messaging[0]
            sender_id = messaging_event.get('sender', {}).get('id')
            if not sender_id: return

            user = self.database.get_user(sender_id)
            if not user:
                user = self.database.create_user(sender_id)
                self._send_text_message(sender_id,
                                        "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ –∏–ª–∏ –≤–∏–¥–µ–æ —Ñ–∞–π–ª –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏.")
                return

            if 'message' in messaging_event and 'attachments' in messaging_event['message']:
                self._handle_attachments(sender_id, messaging_event['message']['attachments'], user)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_message: {e}", exc_info=True)

    def _handle_attachments(self, sender_id: str, attachments: List[Dict], user: Dict[str, Any]):
        for attachment in attachments:
            if attachment.get('type') in ['audio', 'video']:
                file_url = attachment.get('payload', {}).get('url')
                if file_url:
                    self._send_text_message(sender_id,
                                            "‚úÖ –ü—Ä–∏–Ω—è–ª –≤–∞—à —Ñ–∞–π–ª –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É. –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏—à–ª—é, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤.")
                    user_preferences = {'preferred_language': user.get('preferred_language')}

                    if celery_app_client:
                        # –ü–µ—Ä–µ–¥–∞–µ–º –Ω–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É, –∞ —Å–∞–º URL
                        celery_app_client.send_task('tasks.process_media', args=[sender_id, file_url, user_preferences])
                        logger.info(f"–ó–∞–¥–∞—á–∞ –¥–ª—è URL {file_url} –æ—Ç {sender_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å.")
                    else:
                        logger.error("Celery –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
                        self._send_text_message(sender_id, "‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å.")
                else:
                    self._send_text_message(sender_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª.")
                return  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ –≤–ª–æ–∂–µ–Ω–∏–µ
        self._send_text_message(sender_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –∞—É–¥–∏–æ –∏–ª–∏ –≤–∏–¥–µ–æ —Ñ–∞–π–ª.")

    def _send_text_message(self, recipient_id: str, message_text: str):
        try:
            payload = {'recipient': {'id': recipient_id}, 'message': {'text': message_text},
                       'access_token': self.page_access_token}
            requests.post("https://graph.facebook.com/v18.0/me/messages", json=payload, timeout=10).raise_for_status()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient_id}: {e}")