# services/media_handler.py - –í–ï–†–°–ò–Ø –° –§–ò–ù–ê–õ–¨–ù–û–ô –ü–û–°–¢-–û–ë–†–ê–ë–û–¢–ö–û–ô
import os
import logging
from typing import Optional, Tuple, Dict, Any

from .audio_processor import AudioProcessor
from .language_detector import LanguageDetector
from .transcription_service import TranscriptionService
from .translation_service import TranslationService
from .native_script_service import NativeScriptService
from .correction_service import CorrectionService

logger = logging.getLogger(__name__)


class MediaHandler:
    def __init__(self, transcription_service: TranscriptionService, translation_service: TranslationService):
        self.audio_processor = AudioProcessor()
        self.language_detector = LanguageDetector()
        self.native_script_service = NativeScriptService()
        self.transcription_service = transcription_service
        self.translation_service = translation_service
        self.correction_service = CorrectionService()

    def process_media(self, file_path: str, user_preferences: Optional[Dict] = None) -> Dict[str, Any]:
        """
        –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏: —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è -> –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–∏ -> –ø–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–∞.
        """
        audio_path = None
        user_prefs = user_preferences or {}

        try:
            logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞: {file_path}")
            expected_language = user_prefs.get('preferred_language')

            audio_path = self.audio_processor.process_file(file_path)
            if not audio_path:
                return {'success': False, 'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –º–µ–¥–∏–∞ —Ñ–∞–π–ª'}

            text, detected_language = self.transcription_service.transcribe_with_fallback(
                audio_path, expected_language
            )

            if text.startswith("–û—à–∏–±–∫–∞"):
                return {'success': False, 'error': text, 'processed_audio_path': audio_path}

            # –≠—Ç–∞–ø 1: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            final_text = text
            quality_analysis = self._analyze_transcription_quality(final_text, detected_language)

            if detected_language == 'km' and quality_analysis.get('quality') == 'poor':
                logger.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è. –ó–∞–ø—É—Å–∫–∞–µ–º GPT –∫–æ—Ä—Ä–µ–∫—Ü–∏—é...")
                corrected_text = self.correction_service.correct_khmer_transliteration(final_text)
                if corrected_text:
                    final_text = corrected_text

            # üîß –≠–¢–ê–ü 2: –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–û–°–¢-–û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–ê
            # –ó–∞–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —à–∞–≥ –¥–ª—è –ª—é–±–æ–≥–æ –∫—Ö–º–µ—Ä—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, —á—Ç–æ–±—ã —É–ª—É—á—à–∏—Ç—å –µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–æ.
            if detected_language == 'km':
                logger.info("–ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫—É –∫—Ö–º–µ—Ä—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞...")
                processed_text = self.correction_service.post_process_khmer_text(final_text)
                if processed_text:
                    final_text = processed_text  # –ó–∞–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ "–ø—Ä–∏—á–µ—Å–∞–Ω–Ω—É—é" –≤–µ—Ä—Å–∏—é

            # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            final_quality_analysis = self._analyze_transcription_quality(final_text, detected_language)

            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = {
                'success': True,
                'transcription': final_text,
                'detected_language': detected_language,
                'quality_analysis': final_quality_analysis,
                'language_info': self._get_language_info_safe(detected_language),
                'processed_audio_path': audio_path
            }

            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç: {final_text[:100]}...")
            return result

        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ–¥–∏–∞: {e}", exc_info=True)
            return {'success': False, 'error': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞', 'processed_audio_path': audio_path}

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã (_analyze_transcription_quality, –∏ —Ç.–¥.) –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    def _analyze_transcription_quality(self, text: str, language: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª—è –Ω–∞—Ç–∏–≤–Ω—ã—Ö —è–∑—ã–∫–æ–≤"""
        try:
            native_languages = ['km', 'th', 'zh', 'ja', 'ko', 'vi']
            if language in native_languages:
                analysis = self.native_script_service.analyze_script_quality(text, language)
                if 'message' not in analysis:
                    analysis['formatted_message'] = self.native_script_service.format_quality_message(
                        analysis, language
                    )
                return analysis
            else:
                return {'quality': 'good', 'native_ratio': 1.0, 'message': '‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ',
                        'has_transliteration': False}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–∞—á–µ—Å—Ç–≤–∞: {e}")
            return {'quality': 'unknown', 'native_ratio': 0.0, 'message': '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ',
                    'error': str(e)}

    def _get_language_info_safe(self, detected_language: str) -> Dict[str, str]:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —è–∑—ã–∫–µ"""
        language_names = {
            'km': {'name': 'Khmer', 'native': '·ûÅ·üí·ûò·üÇ·ûö'},
            'en': {'name': 'English', 'native': 'English'},
            'ru': {'name': 'Russian', 'native': '–†—É—Å—Å–∫–∏–π'},
            'th': {'name': 'Thai', 'native': '‡πÑ‡∏ó‡∏¢'},
            'vi': {'name': 'Vietnamese', 'native': 'Ti·∫øng Vi·ªát'},
        }
        return language_names.get(detected_language, {'name': detected_language.upper(), 'native': ''})

    def validate_file(self, file_path: str, is_premium: bool = False) -> Tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–∞–π–ª –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º"""
        return self.audio_processor.validate_audio_file(file_path)