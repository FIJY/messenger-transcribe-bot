# services/message_handler.py - —Å –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
import os
import logging
import requests
from config.constants import FREE_DAILY_LIMIT, MAX_AUDIO_DURATION_FREE, MAX_AUDIO_DURATION_PREMIUM
from .media_handler import MediaHandler

logger = logging.getLogger(__name__)


class MessageHandler:
    def __init__(self, db, payment):
        self.db = db
        self.media_handler = MediaHandler()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π MediaHandler
        self.payment = payment
        self.page_access_token = os.getenv('PAGE_ACCESS_TOKEN')
        self.graph_url = "https://graph.facebook.com/v17.0/me"

    def handle_webhook(self, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö webhook —Å–æ–±—ã—Ç–∏–π"""
        try:
            for entry in data.get('entry', []):
                for messaging_event in entry.get('messaging', []):
                    sender_id = messaging_event['sender']['id']

                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                    if 'message' in messaging_event and 'text' in messaging_event['message']:
                        self.handle_text_message(sender_id, messaging_event['message']['text'])

                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ –∏ –≤–∏–¥–µ–æ
                    elif 'message' in messaging_event and 'attachments' in messaging_event['message']:
                        for attachment in messaging_event['message']['attachments']:
                            if attachment['type'] in ['audio', 'video']:
                                media_url = attachment['payload'].get('url')
                                if media_url:
                                    self.handle_media_message(sender_id, media_url, attachment['type'])

                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ postback (–∫–Ω–æ–ø–æ–∫)
                    elif 'postback' in messaging_event:
                        self.handle_postback(sender_id, messaging_event['postback']['payload'])

        except Exception as e:
            logger.error(f"Error handling webhook: {str(e)}")

    def handle_text_message(self, sender_id, text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥"""
        text_lower = text.lower().strip()

        # –ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏
        if text_lower in ['/help', 'help', '–ø–æ–º–æ—â—å', '·ûá·üÜ·ûì·ûΩ·ûô']:
            self.send_help_message(sender_id)

        # –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç—É—Å–∞
        elif text_lower in ['/status', 'status', '—Å—Ç–∞—Ç—É—Å', '·ûü·üí·ûê·û∂·ûì·ûó·û∂·ûñ']:
            self.send_status_message(sender_id)

        # –ö–æ–º–∞–Ω–¥–∞ –ø–æ–¥–ø–∏—Å–∫–∏
        elif text_lower in ['/subscribe', 'subscribe', '–ø–æ–¥–ø–∏—Å–∫–∞', '·ûá·û∂·ûú']:
            self.send_subscription_message(sender_id)

        # –ö–æ–º–∞–Ω–¥–∞ —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–æ–≤ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        elif text_lower in ['/reset', 'reset', '—Å–±—Ä–æ—Å']:
            from datetime import datetime, timedelta
            today_start = datetime.utcnow().replace(hour=0, minute=0, second=0, microsecond=0)

            # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            self.db.transcriptions.delete_many({
                "user_id": sender_id,
                "created_at": {"$gte": today_start}
            })

            self.send_text_message(sender_id, "‚úÖ –õ–∏–º–∏—Ç—ã —Å–±—Ä–æ—à–µ–Ω—ã! –ú–æ–∂–µ—Ç–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å.")

        # –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
        elif text_lower in ['/start', 'start', '–ø—Ä–∏–≤–µ—Ç', 'hi', 'hello', '·ûü·ûΩ·ûü·üí·ûè·û∏']:
            self.send_welcome_message(sender_id)

        else:
            # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
            self.send_text_message(sender_id,
                                   "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –≤–∏–¥–µ–æ, –∏ —è –ø–µ—Ä–µ–≤–µ–¥—É –∏—Ö –≤ —Ç–µ–∫—Å—Ç! üé§üìπ\n"
                                   "Send me a voice message or video and I'll transcribe it! üé§üìπ\n"
                                   "·ûü·ûº·ûò·ûï·üí·ûâ·ûæ·ûü·û∂·ûö·ûá·û∂·ûü·üÜ·û°·üÅ·ûÑ ·û¨·ûú·û∏·ûä·üÅ·û¢·ûº·ûò·ûÄ·ûÅ·üí·ûâ·ûª·üÜ ·û†·ûæ·ûô·ûÅ·üí·ûâ·ûª·üÜ·ûì·ûπ·ûÑ·ûî·ûÄ·ûî·üí·ûö·üÇ·ûú·û∂·ûá·û∂·û¢·ûè·üí·ûê·ûî·ûë! üé§üìπ")

    def handle_media_message(self, sender_id, media_url, media_type):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ/–≤–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = self.db.get_or_create_user(sender_id)

        if not self.check_user_limits(sender_id, user):
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        emoji = "üéß" if media_type == "audio" else "üé•"
        self.send_text_message(sender_id,
                               f"{emoji} –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à–µ {media_type}... / Processing... / ·ûÄ·üÜ·ûñ·ûª·ûÑ·ûä·üÜ·ûé·ûæ·ûö·ûÄ·û∂·ûö...")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ–¥–∏–∞ –ë–ï–ó –ø–µ—Ä–µ–≤–æ–¥–∞ —Å–Ω–∞—á–∞–ª–∞
        result = self.media_handler.process_media_url(
            media_url,
            media_type,
            user['subscription_type'],
            include_translation=False  # –ù–ï –≤–∫–ª—é—á–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        )

        if result['success']:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
            message_text = f"üìù {result['language']}: {result['text']}"
            self.send_text_message(sender_id, message_text)

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≤ –ë–î
            transcription_id = self.db.save_transcription(
                user_id=sender_id,
                media_type=media_type,
                media_url=media_url,
                transcription=result['text'],
                translation=None,  # –ü–æ–∫–∞ –±–µ–∑ –ø–µ—Ä–µ–≤–æ–¥–∞
                language=result['language'],
                duration_seconds=result.get('duration_seconds', 0)
            )

            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            self.db.increment_user_usage(sender_id)

            # –ï—Å–ª–∏ —è–∑—ã–∫ –ù–ï –∞–Ω–≥–ª–∏–π—Å–∫–∏–π, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥
            if result['language_code'] != 'en':
                self.send_translation_offer(sender_id, media_url, transcription_id)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–∞—Ö
            self.send_usage_info(sender_id, user)
        else:
            self.send_text_message(sender_id,
                                   f"‚ùå –û—à–∏–±–∫–∞: {result['error']}\n"
                                   f"‚ùå Error: {result['error']}\n"
                                   f"‚ùå ·ûÄ·üÜ·û†·ûª·ûü: {result['error']}")

    def check_user_limits(self, sender_id, user):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user['subscription_type'] == 'free':
            daily_usage = self.db.get_daily_usage(sender_id)
            if daily_usage >= FREE_DAILY_LIMIT:
                self.send_limit_reached_message(sender_id)
                return False
        return True

    def send_usage_info(self, sender_id, user):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏"""
        if user['subscription_type'] == 'free':
            daily_usage = self.db.get_daily_usage(sender_id)
            remaining = FREE_DAILY_LIMIT - daily_usage

            self.send_text_message(sender_id,
                                   f"‚úÖ –û—Å—Ç–∞–ª–æ—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π —Å–µ–≥–æ–¥–Ω—è: {remaining}\n"
                                   f"–ü–æ–ª—É—á–∏—Ç–µ –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø - /subscribe")

    def handle_postback(self, sender_id, payload):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        if payload == 'GET_STARTED':
            self.send_welcome_message(sender_id)
        elif payload == 'SUBSCRIBE':
            self.send_subscription_message(sender_id)
        elif payload == 'HELP':
            self.send_help_message(sender_id)

    def send_text_message(self, recipient_id, text):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            response = requests.post(
                f"{self.graph_url}/messages",
                params={"access_token": self.page_access_token},
                json={
                    "recipient": {"id": recipient_id},
                    "message": {"text": text}
                }
            )

            if response.status_code != 200:
                logger.error(f"Failed to send message: {response.text}")

        except Exception as e:
            logger.error(f"Error sending message: {str(e)}")

    def send_welcome_message(self, sender_id):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        message = {
            "text": (
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Audio Transcribe Bot!\n\n"
                "üé§ –Ø –º–æ–≥—É –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –≤–∞—à–∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤–∏–¥–µ–æ –≤ —Ç–µ–∫—Å—Ç –Ω–∞ –ª—é–±–æ–º —è–∑—ã–∫–µ.\n\n"
                "üìù –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∞—É–¥–∏–æ –∏–ª–∏ –≤–∏–¥–µ–æ!\n\n"
                "üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–æ: 10 —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π –≤ –¥–µ–Ω—å (–¥–æ 5 –º–∏–Ω—É—Ç)\n"
                "‚≠ê –ü—Ä–µ–º–∏—É–º: –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø (–¥–æ 60 –º–∏–Ω—É—Ç)\n\n"
                "–ö–æ–º–∞–Ω–¥—ã:\n"
                "/help - –ü–æ–º–æ—â—å\n"
                "/status - –í–∞—à —Å—Ç–∞—Ç—É—Å\n"
                "/subscribe - –ü–æ–¥–ø–∏—Å–∫–∞"
            )
        }

        try:
            response = requests.post(
                f"{self.graph_url}/messages",
                params={"access_token": self.page_access_token},
                json={
                    "recipient": {"id": sender_id},
                    "message": message
                }
            )

            if response.status_code != 200:
                logger.error(f"Failed to send welcome message: {response.text}")

        except Exception as e:
            logger.error(f"Error sending welcome message: {str(e)}")

    def send_help_message(self, sender_id):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        help_text = (
            "üìñ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:\n\n"
            "1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –≤–∏–¥–µ–æ\n"
            "2Ô∏è‚É£ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç —è–∑—ã–∫\n"
            "3Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π\n\n"
            "üí° –°–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞:\n"
            "‚Ä¢ –ì–æ–≤–æ—Ä–∏—Ç–µ —á–µ—Ç–∫–æ –∏ –Ω–µ —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ\n"
            "‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ —à—É–º–Ω—ã—Ö –º–µ—Å—Ç\n"
            "‚Ä¢ –î–µ—Ä–∂–∏—Ç–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω –±–ª–∏–∑–∫–æ\n\n"
            "üåç –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏:\n"
            "–†—É—Å—Å–∫–∏–π, English, ·ûó·û∂·ûü·û∂·ûÅ·üí·ûò·üÇ·ûö, ‰∏≠Êñá, Espa√±ol, Fran√ßais –∏ 90+ –¥—Ä—É–≥–∏—Ö\n\n"
            "‚è± –õ–∏–º–∏—Ç—ã:\n"
            "‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ: –¥–æ 5 –º–∏–Ω—É—Ç\n"
            "‚Ä¢ Premium: –¥–æ 60 –º–∏–Ω—É—Ç\n\n"
            "/status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à —Å—Ç–∞—Ç—É—Å\n"
            "/subscribe - –ø–æ–ª—É—á–∏—Ç—å Premium"
        )

        self.send_text_message(sender_id, help_text)

    def send_status_message(self, sender_id):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = self.db.get_or_create_user(sender_id)
        daily_usage = self.db.get_daily_usage(sender_id)

        if user['subscription_type'] == 'free':
            remaining = FREE_DAILY_LIMIT - daily_usage
            limit_info = f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π —Å–µ–≥–æ–¥–Ω—è: {daily_usage}\n–û—Å—Ç–∞–ª–æ—Å—å —Å–µ–≥–æ–¥–Ω—è: {remaining}/{FREE_DAILY_LIMIT}"
            max_duration = MAX_AUDIO_DURATION_FREE // 60
        else:
            limit_info = "–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏"
            max_duration = MAX_AUDIO_DURATION_PREMIUM // 60

        status_text = (
            f"üìä –í–∞—à —Å—Ç–∞—Ç—É—Å\n\n"
            f"–¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞: {user['subscription_type'].title()}\n"
            f"{limit_info}\n"
            f"–í—Å–µ–≥–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π: {user.get('total_transcriptions', 0)}\n"
            f"–ú–∞–∫—Å. –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {max_duration} –º–∏–Ω—É—Ç"
        )

        self.send_text_message(sender_id, status_text)

    def send_subscription_message(self, sender_id):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ"""
        # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
        subscription_text = (
            "‚≠ê Premium –ü–æ–¥–ø–∏—Å–∫–∞\n\n"
            "‚úÖ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏\n"
            "‚úÖ –§–∞–π–ª—ã –¥–æ 60 –º–∏–Ω—É—Ç\n"
            "‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞\n"
            "‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π\n\n"
            "üí∞ –¶–µ–Ω–∞: $4.99/–º–µ—Å—è—Ü\n\n"
            "üîú –ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!"
        )

        self.send_text_message(sender_id, subscription_text)

    def send_limit_reached_message(self, sender_id):
        """–°–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞"""
        message = {
            "attachment": {
                "type": "template",
                "payload": {
                    "template_type": "button",
                    "text": (
                        "üö´ –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π.\n\n"
                        "–ü–æ–ª—É—á–∏—Ç–µ –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø —Å Premium –ø–æ–¥–ø–∏—Å–∫–æ–π!"
                    ),
                    "buttons": [
                        {
                            "type": "postback",
                            "title": "‚≠ê –ü–æ–ª—É—á–∏—Ç—å Premium",
                            "payload": "SUBSCRIBE"
                        }
                    ]
                }
            }
        }

        try:
            response = requests.post(
                f"{self.graph_url}/messages",
                params={"access_token": self.page_access_token},
                json={
                    "recipient": {"id": sender_id},
                    "message": message
                }
            )

            if response.status_code != 200:
                logger.error(f"Failed to send message: {response.text}")
                # Fallback –Ω–∞ –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                self.send_text_message(sender_id,
                                       "üö´ –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞.\n–ü–æ–ª—É—á–∏—Ç–µ Premium - /subscribe")

        except Exception as e:
            logger.error(f"Error sending limit message: {str(e)}")