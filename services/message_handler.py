# services/message_handler.py - –ü–æ–ª–Ω–∞—è –∏ —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è
import logging
import requests
import os
import tempfile
from typing import Dict, Any, Optional, List
from .media_handler import MediaHandler
from .database import Database
from .translation_service import TranslationService
from .audio_processor import AudioProcessor

logger = logging.getLogger(__name__)


class MessageHandler:
    def __init__(self, media_handler: MediaHandler, database: Database, translation_service: TranslationService):
        self.media_handler = media_handler
        self.database = database
        self.translation_service = translation_service
        self.audio_processor = AudioProcessor()  # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è —É—Ç–∏–ª–∏—Ç
        self.page_access_token = os.getenv('PAGE_ACCESS_TOKEN')
        # –õ–∏–º–∏—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –∫–∞–∫ –≤—ã –∏ —É–∫–∞–∑–∞–ª–∏
        self.FREE_DAILY_LIMIT = int(os.getenv('FREE_DAILY_LIMIT', '9999'))
        self.PREMIUM_DAILY_LIMIT = int(os.getenv('PREMIUM_DAILY_LIMIT', '9999'))

    def handle_message(self, webhook_event: Dict[str, Any]):
        """–ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π –æ—Ç Messenger."""
        sender_id = webhook_event.get('sender', {}).get('id')
        if not sender_id:
            logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç sender_id –≤ —Å–æ–±—ã—Ç–∏–∏")
            return

        user = self.database.get_user(sender_id)
        if not user:
            user = self.database.create_user(sender_id)
            self._send_welcome_message(sender_id)
            return

        if 'message' in webhook_event:
            message = webhook_event['message']

            # 1. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –±—ã—Å—Ç—Ä—É—é –∫–Ω–æ–ø–∫—É
            if 'quick_reply' in message:
                payload = message['quick_reply'].get('payload')
                if payload:
                    self._handle_quick_reply(sender_id, payload, user)
                    return

            # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ñ–∞–π–ª–æ–≤
            if not self._check_usage_limits(user) and 'attachments' in message:
                self._send_limit_exceeded_message(sender_id)
                return

            # 3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–ª–æ–∂–µ–Ω–∏—è (–∞—É–¥–∏–æ/–≤–∏–¥–µ–æ)
            if 'attachments' in message:
                self._handle_attachments(sender_id, message['attachments'], user)
                return

            # 4. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if 'text' in message:
                self._handle_text_message(sender_id, message['text'])
                return

        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –∏–∑ –≤—ã—à–µ–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ
        self._send_text_message(sender_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ –∏–ª–∏ –≤–∏–¥–µ–æ —Ñ–∞–π–ª –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏.")

    def _handle_quick_reply(self, sender_id: str, payload: str, user: Dict[str, Any]):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –±—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã, –≤–∫–ª—é—á–∞—è –±–µ—Å—à–æ–≤–Ω—ã–π —Ä–µ—Ç—Ä–∞–π."""
        logger.info(f"User {sender_id} clicked quick reply: {payload}")

        if payload.startswith('RETRY_LANG_'):
            retry_info = self.database.get_retry_info(sender_id)
            if not retry_info or not retry_info.get('file_path'):
                self._send_text_message(sender_id,
                                        "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Å–Ω–æ–≤–∞.")
                return

            file_to_retry = retry_info['file_path']
            if not os.path.exists(file_to_retry):
                self._send_text_message(sender_id, f"‚ùå –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª —É–∂–µ —É–¥–∞–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Å–Ω–æ–≤–∞.")
                return

            lang_code = payload.replace('RETRY_LANG_', '').lower()
            lang_names = {'km': '–ö—Ö–º–µ—Ä—Å–∫–∏–π', 'th': '–¢–∞–π—Å–∫–∏–π', 'vi': '–í—å–µ—Ç–Ω–∞–º—Å–∫–∏–π', 'en': '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π'}
            lang_name = lang_names.get(lang_code, lang_code.upper())

            self._send_text_message(sender_id, f"‚úÖ –ü–æ–Ω—è–ª! –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª —Å —è–∑—ã–∫–æ–º: **{lang_name}**...")

            user['preferred_language'] = lang_code

            # –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¢–û–¢ –ñ–ï –°–ê–ú–´–ô —Ñ–∞–π–ª
            result = self.media_handler.process_media(file_to_retry, user)

            if result.get('success'):
                new_response = self._format_transcription_response(result)
                self._send_text_message(sender_id, new_response)
            else:
                self._send_text_message(sender_id, f"‚ùå –ü—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {result.get('error')}")

            # –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ä–µ—Ç—Ä–∞—è
            self.audio_processor.cleanup_temp_file(file_to_retry)
            self.database.store_retry_info(sender_id, {'file_path': None})  # –û—á–∏—â–∞–µ–º –∏–Ω—Ñ–æ
            return

        if payload == 'LANG_CORRECT':
            retry_info = self.database.get_retry_info(sender_id)
            if retry_info and retry_info.get('file_path'):
                self.audio_processor.cleanup_temp_file(retry_info['file_path'])
                self.database.store_retry_info(sender_id, {'file_path': None})
            self._send_text_message(sender_id, "üëç –û—Ç–ª–∏—á–Ω–æ! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.")
            return

    def _handle_attachments(self, sender_id: str, attachments: List[Dict], user: Dict[str, Any]):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–ª–æ–∂–µ–Ω–∏—è (–∞—É–¥–∏–æ/–≤–∏–¥–µ–æ —Ñ–∞–π–ª—ã)."""
        if user.get('preferred_language'):
            self.database.set_user_language_preference(sender_id, None)
            user = self.database.get_user(sender_id)

        for attachment in attachments:
            if attachment.get('type') in ['audio', 'video']:
                original_file_path = self._download_file(attachment)
                if not original_file_path:
                    self._send_text_message(sender_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª.")
                    return

                self._process_media_file(sender_id, original_file_path, user)
                return
        self._send_text_message(sender_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –∞—É–¥–∏–æ –∏–ª–∏ –≤–∏–¥–µ–æ —Ñ–∞–π–ª.")

    def _download_file(self, attachment: Dict) -> Optional[str]:
        """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –Ω–µ–º—É."""
        try:
            file_url = attachment.get('payload', {}).get('url')
            if not file_url: return None

            headers = {'Authorization': f'Bearer {self.page_access_token}'}
            response = requests.get(file_url, headers=headers, stream=True, timeout=60)
            response.raise_for_status()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(delete=False, suffix='.tmp') as temp_file:
                temp_file_path = temp_file.name
                for chunk in response.iter_content(chunk_size=8192):
                    temp_file.write(chunk)
            return temp_file_path
        except requests.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}", exc_info=True)
            return None

    def _process_media_file(self, sender_id: str, file_path: str, user: Dict[str, Any]):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π –º–µ–¥–∏–∞ —Ñ–∞–π–ª."""
        try:
            self._send_processing_message(sender_id)

            is_valid, error_msg = self.media_handler.validate_file(file_path, user.get('is_premium', False))
            if not is_valid:
                self._send_text_message(sender_id, f"‚ùå {error_msg}")
                self.audio_processor.cleanup_temp_file(file_path)
                return

            result = self.media_handler.process_media(file_path, user)
            processed_audio_path = result.get('processed_audio_path')

            # –í–∞–∂–Ω–æ: –Ω–µ —É–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –∂–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º
            if file_path != processed_audio_path:
                self.audio_processor.cleanup_temp_file(file_path)

            if not result.get('success'):
                self._send_text_message(sender_id, f"‚ùå {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                self.audio_processor.cleanup_temp_file(processed_audio_path)
                return

            self.database.save_transcription(user_id=sender_id, **result)
            self.database.increment_usage(user_id=sender_id)

            self._send_transcription_with_language_buttons(sender_id, result)
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}", exc_info=True)
            self._send_text_message(sender_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞.")
            if 'file_path' in locals() and file_path:
                self.audio_processor.cleanup_temp_file(file_path)
            if 'processed_audio_path' in locals() and processed_audio_path:
                self.audio_processor.cleanup_temp_file(processed_audio_path)

    def _send_transcription_with_language_buttons(self, sender_id: str, result: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —è–∑—ã–∫–∞."""
        response_text = self._format_transcription_response(result)
        processed_audio_path = result.get('processed_audio_path')

        if self._should_show_language_correction_buttons(result) and processed_audio_path:
            self.database.store_retry_info(sender_id, {'file_path': processed_audio_path})

            question = "\n\nü§î –Ø–∑—ã–∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ? –ï—Å–ª–∏ –Ω–µ—Ç, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä–Ω—ã–π:"
            quick_replies = [
                {"content_type": "text", "title": "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ", "payload": "LANG_CORRECT"},
                {"content_type": "text", "title": "üá∞üá≠ –ö—Ö–º–µ—Ä—Å–∫–∏–π", "payload": "RETRY_LANG_KM"},
                {"content_type": "text", "title": "üáπüá≠ –¢–∞–π—Å–∫–∏–π", "payload": "RETRY_LANG_TH"},
                {"content_type": "text", "title": "üáªüá≥ –í—å–µ—Ç–Ω–∞–º—Å–∫–∏–π", "payload": "RETRY_LANG_VI"},
            ]
            self._send_text_message(sender_id, response_text)
            self._send_message_with_quick_replies(sender_id, question, quick_replies)
        else:
            self._send_text_message(sender_id, response_text)
            if processed_audio_path:
                self.audio_processor.cleanup_temp_file(processed_audio_path)

    def _handle_text_message(self, sender_id: str, text: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—ã—á–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        text_lower = text.lower().strip()
        if any(keyword in text_lower for keyword in
               ['help', '–ø–æ–º–æ—â—å', '—Å–ø—Ä–∞–≤–∫–∞', '/start', 'start', '–ø—Ä–∏–≤–µ—Ç', 'hello']):
            self._send_help_message(sender_id)
            return
        if any(keyword in text_lower for keyword in ['stats', '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '–ª–∏–º–∏—Ç']):
            user = self.database.get_user(sender_id)  # –ù—É–∂–µ–Ω –∞–∫—Ç—É–∞–ª—å–Ω—ã–π user
            self._send_stats_message(sender_id, user)
            return

        response = "üéôÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∞—É–¥–∏–æ –∏–ª–∏ –≤–∏–¥–µ–æ —Ñ–∞–π–ª –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏!"
        self._send_text_message(sender_id, response)

    def _should_show_language_correction_buttons(self, result: Dict[str, Any]) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —è–∑—ã–∫–∞."""
        quality_analysis = result.get('quality_analysis', {})
        if quality_analysis.get('quality') in ['poor', 'mixed']:
            logger.info(f"–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑-–∑–∞ –ø–ª–æ—Ö–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞: {quality_analysis.get('quality')}")
            return True
        return False

    def _format_transcription_response(self, result: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏."""
        detected_lang = result.get('detected_language', 'unknown')
        transcription = result.get('transcription', '')
        language_info = result.get('language_info', {})
        quality_analysis = result.get('quality_analysis', {})

        language_icons = {'km': 'üá∞üá≠', 'th': 'üáπüá≠', 'vi': 'üáªüá≥', 'en': 'üá∫üá∏', 'ru': 'üá∑üá∫'}
        icon = language_icons.get(detected_lang, 'üåê')
        lang_name = language_info.get('name', detected_lang.upper())

        response = f"üéØ **–Ø–∑—ã–∫:** {icon} {lang_name}\n\n"
        response += f"üìù **–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:**\n{transcription}"

        if quality_analysis.get('message') and '—É—Å–ø–µ—à–Ω–æ' not in quality_analysis.get('message', ''):
            response += f"\n\n{quality_analysis['message']}"
        return response

    def _check_usage_limits(self, user: Dict[str, Any]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏–º–∏—Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è."""
        daily_usage = user.get('daily_usage', 0)
        is_premium = user.get('is_premium', False)
        limit = self.PREMIUM_DAILY_LIMIT if is_premium else self.FREE_DAILY_LIMIT
        return daily_usage < limit

    def _send_welcome_message(self, sender_id: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
        message = "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Transcribe Bot! –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∞—É–¥–∏–æ –∏–ª–∏ –≤–∏–¥–µ–æ —Ñ–∞–π–ª."
        self._send_text_message(sender_id, message)

    def _send_help_message(self, sender_id: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏."""
        message = "üìñ **–°–ø—Ä–∞–≤–∫–∞:**\n‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ/–≤–∏–¥–µ–æ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏.\n‚Ä¢ 'stats' - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è."
        self._send_text_message(sender_id, message)

    def _send_stats_message(self, sender_id: str, user: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        daily_usage = user.get('daily_usage', 0)
        total_transcriptions = user.get('total_transcriptions', 0)
        is_premium = user.get('is_premium', False)
        limit = self.PREMIUM_DAILY_LIMIT if is_premium else self.FREE_DAILY_LIMIT
        remaining = max(0, limit - daily_usage)
        status = "üíé Premium" if is_premium else "üÜì Free"
        message = f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n‚Ä¢ –°—Ç–∞—Ç—É—Å: {status}\n‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {daily_usage}/{limit}\n‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å: {remaining}"
        self._send_text_message(sender_id, message)

    def _send_limit_exceeded_message(self, sender_id: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞."""
        self._send_text_message(sender_id, "‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç. –õ–∏–º–∏—Ç—ã —Å–±—Ä–∞—Å—ã–≤–∞—é—Ç—Å—è –≤ 00:00 UTC.")

    def _send_processing_message(self, sender_id: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏."""
        self._send_text_message(sender_id, "üéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à —Ñ–∞–π–ª...")

    def _send_text_message(self, recipient_id: str, message_text: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
        return self._send_api_request(recipient_id, {'text': message_text})

    def _send_message_with_quick_replies(self, recipient_id: str, text: str, quick_replies: List[Dict]):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±—ã—Å—Ç—Ä—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏."""
        message_data = {'text': text, 'quick_replies': quick_replies}
        return self._send_api_request(recipient_id, message_data)

    def _send_api_request(self, recipient_id: str, message_data: Dict) -> bool:
        """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Messenger API."""
        try:
            payload = {
                'recipient': {'id': recipient_id},
                'messaging_type': 'RESPONSE',
                'message': message_data,
                'access_token': self.page_access_token
            }
            response = requests.post(
                "https://graph.facebook.com/v18.0/me/messages",
                json=payload,
                timeout=10
            )
            response.raise_for_status()
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient_id}")
            return True
        except requests.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è API: {e}", exc_info=True)
            if e.response:
                logger.error(f"–û—Ç–≤–µ—Ç API: {e.response.text}")
            return False