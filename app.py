import os
import logging
from flask import Flask, request, jsonify
from dotenv import load_dotenv
import asyncio
from functools import wraps

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


def create_app():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    app = Flask(__name__)

    # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤
    global message_handler
    message_handler = None

    try:
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤...")

        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º OpenAI –æ—Ç–¥–µ–ª—å–Ω–æ
        logger.info("–ü—Ä–æ–≤–µ—Ä—è–µ–º OpenAI...")
        try:
            import openai
            api_key = os.getenv('OPENAI_API_KEY')
            if not api_key:
                raise ValueError("OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

            logger.info(f"OpenAI –≤–µ—Ä—Å–∏—è: {openai.__version__}")
            logger.info(f"API Key: {api_key[:10]}...")

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å –∞–±—Å–æ–ª—é—Ç–Ω—ã–º –º–∏–Ω–∏–º—É–º–æ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            client = openai.OpenAI(api_key=api_key)
            logger.info("‚úÖ OpenAI –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ OpenAI: {e}")
            raise e

        # –ò–º–ø–æ—Ä—Ç—ã —Å–µ—Ä–≤–∏—Å–æ–≤
        from services.database import Database
        logger.info("‚úÖ Database –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")

        from services.language_detector import LanguageDetector
        logger.info("‚úÖ LanguageDetector –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")

        from services.translation_service import TranslationService
        logger.info("‚úÖ TranslationService –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")

        from services.audio_processor import AudioProcessor
        logger.info("‚úÖ AudioProcessor –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        database = Database()
        logger.info("‚úÖ Database –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ —Å–µ—Ä–≤–∏—Å—ã –±–µ–∑ TranscriptionService –ø–æ–∫–∞
        language_detector = LanguageDetector()
        logger.info("‚úÖ LanguageDetector –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        translation_service = TranslationService()
        logger.info("‚úÖ TranslationService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        audio_processor = AudioProcessor()
        logger.info("‚úÖ AudioProcessor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å TranscriptionService –æ—Ç–¥–µ–ª—å–Ω–æ
        try:
            from services.transcription_service import TranscriptionService
            logger.info("TranscriptionService –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω, —Å–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä...")
            transcription_service = TranscriptionService()
            logger.info("‚úÖ TranscriptionService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ TranscriptionService: {e}")
            # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            transcription_service = None
            logger.info("‚ö†Ô∏è TranscriptionService –æ—Ç–∫–ª—é—á–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É")

        # –°–æ–∑–¥–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
        from services.media_handler import MediaHandler
        from services.message_handler import MessageHandler

        media_handler = MediaHandler(
            transcription_service=transcription_service,
            language_detector=language_detector,
            translation_service=translation_service,
            audio_processor=audio_processor,
            database=database
        )
        logger.info("‚úÖ MediaHandler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        message_handler = MessageHandler(
            media_handler=media_handler,
            database=database
        )
        logger.info("‚úÖ MessageHandler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        logger.info("üéâ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
        import traceback
        traceback.print_exc()
        raise e

    @app.route('/', methods=['GET'])
    def index():
        """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
        return jsonify({
            "status": "Bot is running",
            "message": "Messenger Transcribe Bot is active (Debug Mode)",
            "version": "1.0.0-debug",
            "transcription_available": transcription_service is not None,
            "endpoints": {
                "webhook": "/webhook",
                "health": "/api/health",
                "test": "/api/test"
            }
        })

    @app.route('/api/test', methods=['GET'])
    def test_services():
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤"""
        results = {}

        try:
            # –¢–µ—Å—Ç OpenAI
            if transcription_service:
                results["transcription_service"] = "‚úÖ Available"
            else:
                results["transcription_service"] = "‚ùå Not available"

            # –¢–µ—Å—Ç –¥—Ä—É–≥–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
            results["language_detector"] = "‚úÖ Available" if language_detector else "‚ùå Not available"
            results["translation_service"] = "‚úÖ Available" if translation_service else "‚ùå Not available"
            results["database"] = "‚úÖ Available" if database else "‚ùå Not available"

            return jsonify({
                "status": "test_complete",
                "services": results,
                "timestamp": "2025-06-18T13:30:00Z"
            })

        except Exception as e:
            return jsonify({
                "status": "test_failed",
                "error": str(e)
            }), 500

    @app.route('/api/health', methods=['GET'])
    def health_check():
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        return jsonify({
            "status": "healthy",
            "message": "Debug mode active",
            "transcription": "available" if transcription_service else "disabled"
        })

    @app.route('/webhook', methods=['GET'])
    def webhook_verify():
        """–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è webhook –¥–ª—è Facebook"""
        verify_token = os.getenv('VERIFY_TOKEN', '12345')
        mode = request.args.get('hub.mode')
        token = request.args.get('hub.verify_token')
        challenge = request.args.get('hub.challenge')

        if mode == 'subscribe' and token == verify_token:
            logger.info("Webhook —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")
            return challenge
        else:
            logger.warning("–ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ webhook")
            return 'Forbidden', 403

    @app.route('/webhook', methods=['POST'])
    def webhook_handler():
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Facebook"""
        try:
            data = request.get_json()
            logger.info(f"–ü–æ–ª—É—á–µ–Ω webhook: {data}")

            if not transcription_service:
                logger.warning("TranscriptionService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –æ—Ç–≤–µ—á–∞–µ–º –∑–∞–≥–ª—É—à–∫–æ–π")
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏

            return jsonify({"status": "ok"}), 200

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ webhook: {e}")
            return jsonify({"status": "error", "message": str(e)}), 500

    return app


# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = create_app()

if __name__ == '__main__':
    port = int(os.getenv('PORT', 5000))
    logger.info(f"–ó–∞–ø—É—Å–∫ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    app.run(host='0.0.0.0', port=port, debug=True)