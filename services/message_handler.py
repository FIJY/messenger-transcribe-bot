# services/message_handler.py - –í–ï–†–°–ò–Ø –° –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï–ú UNICODEENCODEERROR
import logging
import os
import tempfile
import requests
import uuid
from typing import Dict, Any, Optional, List
from celery import Celery
from urllib.parse import quote  # üîß –ù–û–í–´–ô –ò–ú–ü–û–†–¢

from .database import Database

logger = logging.getLogger(__name__)

SHARED_DISK_PATH = "/var/data/shared_files"

redis_url = os.getenv('REDIS_URL')
if not redis_url:
    logger.warning("REDIS_URL –Ω–µ –Ω–∞–π–¥–µ–Ω, Celery –∫–ª–∏–µ–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞—á –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.")
    celery_app_client = None
else:
    celery_app_client = Celery('tasks_client', broker=redis_url)


class MessageHandler:
    def __init__(self, database: Database):
        self.database = database
        self.page_access_token = os.getenv('PAGE_ACCESS_TOKEN')
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not os.path.exists(SHARED_DISK_PATH):
            os.makedirs(SHARED_DISK_PATH, exist_ok=True)

    def handle_message(self, webhook_event: Dict[str, Any]):
        # ... (–∫–æ–¥ —ç—Ç–æ–≥–æ –º–µ—Ç–æ–¥–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        entry = webhook_event.get('entry', [])
        if not entry: return
        messaging = entry[0].get('messaging', [])
        if not messaging: return
        messaging_event = messaging[0]
        sender_id = messaging_event.get('sender', {}).get('id')
        if not sender_id: return
        user = self.database.get_user(sender_id)
        if not user:
            user = self.database.create_user(sender_id)
            self._send_text_message(sender_id, "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ –∏–ª–∏ –≤–∏–¥–µ–æ —Ñ–∞–π–ª –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏.")
            return
        if 'message' in messaging_event and 'attachments' in messaging_event['message']:
            self._handle_attachments(sender_id, messaging_event['message']['attachments'], user)

    def _handle_attachments(self, sender_id: str, attachments: List[Dict], user: Dict[str, Any]):
        # ... (–∫–æ–¥ —ç—Ç–æ–≥–æ –º–µ—Ç–æ–¥–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        for attachment in attachments:
            if attachment.get('type') in ['audio', 'video']:
                self._process_media_attachment(sender_id, attachment, user)
                return
        self._send_text_message(sender_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –∞—É–¥–∏–æ –∏–ª–∏ –≤–∏–¥–µ–æ —Ñ–∞–π–ª.")

    def _process_media_attachment(self, sender_id: str, attachment: Dict, user: Dict[str, Any]):
        # ... (–∫–æ–¥ —ç—Ç–æ–≥–æ –º–µ—Ç–æ–¥–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        try:
            file_path = self._download_file(attachment)
            if not file_path:
                self._send_text_message(sender_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª.")
                return
            self._send_text_message(sender_id,
                                    "‚úÖ –ü—Ä–∏–Ω—è–ª –≤–∞—à —Ñ–∞–π–ª –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É. –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏—à–ª—é, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤.")
            user_preferences = {'preferred_language': user.get('preferred_language')}
            if celery_app_client:
                celery_app_client.send_task('tasks.process_media', args=[sender_id, file_path, user_preferences])
                logger.info(f"–ó–∞–¥–∞—á–∞ –¥–ª—è —Ñ–∞–π–ª–∞ {file_path} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {sender_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å.")
            else:
                logger.error("Celery –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ó–∞–¥–∞—á–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
                self._send_text_message(sender_id, "‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥—å: {e}", exc_info=True)
            self._send_text_message(sender_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É.")

    def _download_file(self, attachment: Dict) -> Optional[str]:
        """–°–∫–∞—á–∏–≤–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∞–π–ª –Ω–∞ –æ–±—â–∏–π –¥–∏—Å–∫, –≤–æ–∑–≤—Ä–∞—â–∞—è –µ–≥–æ –ø—É—Ç—å."""
        try:
            file_url = attachment.get('payload', {}).get('url')
            if not file_url: return None

            # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: "–û—á–∏—â–∞–µ–º" URL –æ—Ç –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
            safe_url = quote(file_url, safe=':/&=?')

            headers = {'Authorization': f'Bearer {self.page_access_token}'}
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π URL
            response = requests.get(safe_url, headers=headers, stream=True, timeout=60)
            response.raise_for_status()

            file_extension = os.path.splitext(file_url.split('?')[0])[-1] or '.tmp'
            unique_filename = f"{uuid.uuid4()}{file_extension}"
            file_path = os.path.join(SHARED_DISK_PATH, unique_filename)

            with open(file_path, 'wb') as f:
                for chunk in response.iter_content(chunk_size=8192):
                    f.write(chunk)

            logger.info(f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–∞ –æ–±—â–∏–π –¥–∏—Å–∫: {file_path}")
            return file_path
        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∏–º–µ–Ω–Ω–æ –≤ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ –Ω–∞ –¥–∏—Å–∫: {e}", exc_info=True)
            return None

    def _send_text_message(self, recipient_id: str, message_text: str):
        # ... (–∫–æ–¥ —ç—Ç–æ–≥–æ –º–µ—Ç–æ–¥–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        try:
            payload = {'recipient': {'id': recipient_id}, 'message': {'text': message_text},
                       'access_token': self.page_access_token}
            requests.post("https://graph.facebook.com/v18.0/me/messages", json=payload, timeout=10).raise_for_status()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient_id}: {e}")