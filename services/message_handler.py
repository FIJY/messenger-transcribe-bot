import os
import logging
import requests
from config.constants import FREE_DAILY_LIMIT, MAX_AUDIO_DURATION_FREE, MAX_AUDIO_DURATION_PREMIUM

logger = logging.getLogger(__name__)


class MessageHandler:
    def __init__(self, db, transcriber, payment):
        self.db = db
        self.transcriber = transcriber
        self.payment = payment
        self.page_access_token = os.getenv('PAGE_ACCESS_TOKEN')
        self.webhook_url = "https://graph.facebook.com/v18.0/me/messages"

    def handle_messaging_event(self, messaging_event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
        sender_id = messaging_event['sender']['id']

        try:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
            if 'message' in messaging_event and 'text' in messaging_event['message']:
                self.handle_text_message(sender_id, messaging_event['message']['text'])

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ –∏ –≤–∏–¥–µ–æ
            elif 'message' in messaging_event and 'attachments' in messaging_event['message']:
                for attachment in messaging_event['message']['attachments']:
                    if attachment['type'] in ['audio', 'video']:
                        self.handle_media_message(sender_id, attachment['payload']['url'], attachment['type'])

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ postback (–∫–Ω–æ–ø–∫–∏)
            elif 'postback' in messaging_event:
                self.handle_postback(sender_id, messaging_event['postback']['payload'])

        except Exception as e:
            logger.error(f"Error handling messaging event: {e}")
            self.send_text_message(sender_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    def handle_text_message(self, sender_id, text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥"""
        text_lower = text.lower()

        commands = {
            ('/start', 'start', '–ø—Ä–∏–≤–µ—Ç', 'hello', '·ûü·ûΩ·ûü·üí·ûè·û∏'): self.send_welcome_message,
            ('/help', 'help', '–ø–æ–º–æ—â—å'): self.send_help_message,
            ('/status', 'status', '—Å—Ç–∞—Ç—É—Å'): self.send_status_message,
            ('/subscribe', 'subscribe', '–ø–æ–¥–ø–∏—Å–∫–∞'): self.send_subscription_options,
            ('/reset', 'reset', '—Å–±—Ä–æ—Å'): self.reset_user_limits
        }

        # –ü–æ–∏—Å–∫ –∫–æ–º–∞–Ω–¥—ã
        for command_variants, handler in commands.items():
            if text_lower in command_variants:
                handler(sender_id)
                return

        # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        self.send_text_message(sender_id,
                               "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –≤–∏–¥–µ–æ, –∏ —è –ø–µ—Ä–µ–≤–µ–¥—É –∏—Ö –≤ —Ç–µ–∫—Å—Ç! üé§üìπ\n"
                               "Send me a voice message or video and I'll transcribe it! üé§üìπ\n"
                               "·ûï·üí·ûâ·ûæ·ûü·û∂·ûö·ûá·û∂·ûü·üÜ·û°·üÅ·ûÑ·û¨·ûú·û∏·ûä·üÅ·û¢·ûº·ûò·ûÄ·ûÅ·üí·ûâ·ûª·üÜ ·ûÅ·üí·ûâ·ûª·üÜ·ûì·ûπ·ûÑ·ûî·ûÄ·ûî·üí·ûö·üÇ·ûá·û∂·û¢·ûÄ·üí·ûü·ûö! üé§üìπ")

    def handle_media_message(self, sender_id, media_url, media_type):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ/–≤–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = self.db.get_or_create_user(sender_id)

        if not self.check_user_limits(user):
            self.send_limit_exceeded_message(sender_id)
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        media_emoji = "üé•" if media_type == 'video' else "üéß"
        media_name = "–≤–∏–¥–µ–æ" if media_type == 'video' else "–∞—É–¥–∏–æ"

        # 1. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.send_text_message(sender_id,
                               f"{media_emoji} –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à–µ {media_name}... / Processing... / ·ûÄ·üÜ·ûñ·ûª·ûÑ·ûä·üÜ·ûé·ûæ·ûö·ûÄ·û∂·ûö...")

        try:
            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–∞
            media_data = self.download_audio(media_url)

            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏
            transcription = self.transcriber.transcribe(
                media_data,
                user_subscription=user['subscription_type'],
                media_type=media_type
            )

            if transcription['success']:
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                self.db.increment_user_usage(sender_id)

                # 2. –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
                duration_text = ""
                if transcription.get('duration', 0) > 0:
                    minutes = transcription['duration'] // 60
                    seconds = transcription['duration'] % 60
                    duration_text = f" ({minutes}:{seconds:02d})"

                message = f"üìù **–Ø–∑—ã–∫/Language/·ûó·û∂·ûü·û∂**: {transcription['language']}{duration_text}\n\n"
                message += f"**–¢–µ–∫—Å—Ç/Text/·û¢·ûè·üí·ûê·ûî·ûë**:\n{transcription['text']}"

                self.send_text_message(sender_id, message)

                # 3. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                if user['subscription_type'] == 'free':
                    remaining = FREE_DAILY_LIMIT - self.db.get_daily_usage(sender_id)
                    max_duration = MAX_AUDIO_DURATION_FREE // 60  # –≤ –º–∏–Ω—É—Ç–∞—Ö
                    self.send_text_message(sender_id,
                                           f"‚úÖ –û—Å—Ç–∞–ª–æ—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π —Å–µ–≥–æ–¥–Ω—è: {remaining}\n"
                                           f"‚è±Ô∏è –õ–∏–º–∏—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {max_duration} –º–∏–Ω—É—Ç\n"
                                           f"üåü Premium: 60 –º–∏–Ω—É—Ç + –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ - /subscribe")
                else:
                    max_duration = MAX_AUDIO_DURATION_PREMIUM // 60
                    self.send_text_message(sender_id,
                                           f"‚≠ê Premium –∞–∫—Ç–∏–≤–µ–Ω - –ª–∏–º–∏—Ç {max_duration} –º–∏–Ω—É—Ç –Ω–∞ —Ñ–∞–π–ª")
            else:
                self.send_text_message(sender_id,
                                       f"‚ùå {transcription['error']}")

        except Exception as e:
            logger.error(f"Error processing {media_type}: {e}")
            self.send_text_message(sender_id,
                                   f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {media_name}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    def reset_user_limits(self, sender_id):
        """–°–±—Ä–æ—Å –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        from datetime import datetime, timedelta
        today_start = datetime.utcnow().replace(hour=0, minute=0, second=0, microsecond=0)

        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        self.db.transcriptions.delete_many({
            "user_id": sender_id,
            "created_at": {"$gte": today_start}
        })

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.db.users.update_one(
            {"user_id": sender_id},
            {"$set": {"total_transcriptions": 0}}
        )

        self.send_text_message(sender_id, "‚úÖ –õ–∏–º–∏—Ç—ã —Å–±—Ä–æ—à–µ–Ω—ã! –ú–æ–∂–µ—Ç–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å.")

    def handle_postback(self, sender_id, payload):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        handlers = {
            'SUBSCRIBE': self.send_subscription_options,
            'STATUS': self.send_status_message,
            'BACK_TO_MENU': self.send_welcome_message
        }

        handler = handlers.get(payload)
        if handler:
            handler(sender_id)
        else:
            logger.warning(f"Unknown postback payload: {payload}")

    def check_user_limits(self, user):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user['subscription_type'] == 'premium':
            return True

        daily_usage = self.db.get_daily_usage(user['user_id'])
        return daily_usage < FREE_DAILY_LIMIT

    def send_welcome_message(self, sender_id):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        message = {
            "text": (
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Audio Transcribe Bot!\n\n"
                "üé§ –Ø –º–æ–≥—É –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –≤–∞—à–∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤–∏–¥–µ–æ –≤ —Ç–µ–∫—Å—Ç –Ω–∞ –ª—é–±–æ–º —è–∑—ã–∫–µ.\n\n"
                "üìù –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∞—É–¥–∏–æ –∏–ª–∏ –≤–∏–¥–µ–æ!\n\n"
                "üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–æ: 10 —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π –≤ –¥–µ–Ω—å, –¥–æ 5 –º–∏–Ω—É—Ç\n"
                "‚≠ê –ü—Ä–µ–º–∏—É–º: –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø, –¥–æ 60 –º–∏–Ω—É—Ç\n\n"
                "–ö–æ–º–∞–Ω–¥—ã:\n"
                "/help - –ü–æ–º–æ—â—å\n"
                "/status - –í–∞—à —Å—Ç–∞—Ç—É—Å\n"
                "/subscribe - –ü–æ–¥–ø–∏—Å–∫–∞"
            ),
            "quick_replies": [
                {
                    "content_type": "text",
                    "title": "üìä –ú–æ–π —Å—Ç–∞—Ç—É—Å",
                    "payload": "STATUS"
                },
                {
                    "content_type": "text",
                    "title": "‚≠ê –ü–æ–¥–ø–∏—Å–∫–∞",
                    "payload": "SUBSCRIBE"
                }
            ]
        }
        self.send_message(sender_id, message)

    def send_help_message(self, sender_id):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–º–æ—â–∏"""
        message = (
            "üîß **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:**\n\n"
            "1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "2Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞ —Ç–æ–º –∂–µ —è–∑—ã–∫–µ\n\n"
            "üåç **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏:**\n"
            "‚Ä¢ –ö—Ö–º–µ—Ä—Å–∫–∏–π (·ûÅ·üí·ûò·üÇ·ûö)\n"
            "‚Ä¢ English\n"
            "‚Ä¢ –†—É—Å—Å–∫–∏–π\n"
            "‚Ä¢ ‰∏≠Êñá\n"
            "‚Ä¢ ‡πÑ‡∏ó‡∏¢\n"
            "‚Ä¢ Ti·∫øng Vi·ªát\n"
            "‚Ä¢ –ò –º–Ω–æ–≥–∏–µ –¥—Ä—É–≥–∏–µ!\n\n"
            "üìù **–ö–æ–º–∞–Ω–¥—ã:**\n"
            "/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n"
            "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
            "/status - –í–∞—à —Å—Ç–∞—Ç—É—Å\n"
            "/subscribe - –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞\n"
            "/reset - –°–±—Ä–æ—Å –ª–∏–º–∏—Ç–æ–≤ (—Ç–µ—Å—Ç)"
        )
        self.send_text_message(sender_id, message)

    def send_subscription_options(self, sender_id):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏"""
        message = {
            "attachment": {
                "type": "template",
                "payload": {
                    "template_type": "button",
                    "text": "‚≠ê Premium –ø–æ–¥–ø–∏—Å–∫–∞ - $4.99/–º–µ—Å—è—Ü\n\n‚úÖ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏\n‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞\n‚úÖ –§–∞–π–ª—ã –¥–æ 10 –º–∏–Ω—É—Ç\n‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π",
                    "buttons": [
                        {
                            "type": "web_url",
                            "url": "https://your-payment-site.com/subscribe",
                            "title": "üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
                        },
                        {
                            "type": "postback",
                            "title": "üîô –ù–∞–∑–∞–¥",
                            "payload": "BACK_TO_MENU"
                        }
                    ]
                }
            }
        }
        self.send_message(sender_id, message)

    def send_status_message(self, sender_id):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = self.db.get_or_create_user(sender_id)
        daily_usage = self.db.get_daily_usage(sender_id)

        if user['subscription_type'] == 'premium':
            status = "‚≠ê Premium"
            limit_text = "–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏"
        else:
            status = "üÜì Free"
            remaining = FREE_DAILY_LIMIT - daily_usage
            limit_text = f"–û—Å—Ç–∞–ª–æ—Å—å —Å–µ–≥–æ–¥–Ω—è: {remaining}/{FREE_DAILY_LIMIT}"

        total_transcriptions = user.get('total_transcriptions', 0)

        message = (
            f"üìä **–í–∞—à —Å—Ç–∞—Ç—É—Å**\n\n"
            f"–¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞: {status}\n"
            f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π —Å–µ–≥–æ–¥–Ω—è: {daily_usage}\n"
            f"{limit_text}\n"
            f"–í—Å–µ–≥–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π: {total_transcriptions}"
        )

        self.send_text_message(sender_id, message)

    def send_limit_exceeded_message(self, sender_id):
        """–°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞"""
        message = {
            "attachment": {
                "type": "template",
                "payload": {
                    "template_type": "button",
                    "text": "‚ö†Ô∏è –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π.\n\n–ü–æ–ª—É—á–∏—Ç–µ –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø —Å Premium –ø–æ–¥–ø–∏—Å–∫–æ–π!",
                    "buttons": [
                        {
                            "type": "postback",
                            "title": "‚≠ê –ü–æ–ª—É—á–∏—Ç—å Premium",
                            "payload": "SUBSCRIBE"
                        }
                    ]
                }
            }
        }
        self.send_message(sender_id, message)

    def send_text_message(self, recipient_id, text):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        message = {"text": text}
        self.send_message(recipient_id, message)

    def send_message(self, recipient_id, message):
        """–ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        payload = {
            "recipient": {"id": recipient_id},
            "message": message
        }

        headers = {"Content-Type": "application/json"}
        params = {"access_token": self.page_access_token}

        response = requests.post(
            self.webhook_url,
            params=params,
            headers=headers,
            json=payload
        )

        if response.status_code != 200:
            logger.error(f"Failed to send message: {response.text}")

    def download_audio(self, url):
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞"""
        response = requests.get(url)
        response.raise_for_status()
        return response.content