# services/transcription_service.py - –ü–û–õ–ù–ê–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
import openai
import os
import logging

logger = logging.getLogger(__name__)


class TranscriptionService:
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        api_key = os.getenv('OPENAI_API_KEY')
        if not api_key:
            raise ValueError("OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        try:
            self.client = openai.OpenAI(api_key=api_key)
            self.logger.info("OpenAI –∫–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OpenAI: {e}")
            raise

    def transcribe_with_fallback(self, audio_file_path, language=None):
        """
        –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —è–∑—ã–∫–æ–≤.
        Returns: tuple: (transcription_text, detected_language)
        """
        try:
            self.logger.info(f"–ó–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é –¥–ª—è —è–∑—ã–∫–∞: {language or 'auto'}")

            # –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —è–∑—ã–∫–æ–º (–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å)
            result = self._transcribe_sync(audio_file_path, language)
            text = result.get('text', '').strip()

            if result['success'] and text:
                # –ï—Å–ª–∏ –ø–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ —É—Å–ø–µ—à–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                detected_lang = result.get('detected_language', language or 'unknown')
                self.logger.info(f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏. –Ø–∑—ã–∫: {detected_lang}")
                return text, detected_lang

            # –ï—Å–ª–∏ –ø–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –±—ã–ª —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —è–∑—ã–∫),
            # –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ –≤ —Ä–µ–∂–∏–º–µ –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è.
            self.logger.warning("–ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ –¥–∞–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –ø—Ä–æ–±—É–µ–º –≤ —Ä–µ–∂–∏–º–µ –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è.")
            fallback_result = self._transcribe_sync(audio_file_path, None)
            fallback_text = fallback_result.get('text', '').strip()

            if fallback_result['success'] and fallback_text:
                detected_lang = fallback_result.get('detected_language', 'unknown')
                self.logger.info(f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ —Å–æ –≤—Ç–æ—Ä–æ–π –ø–æ–ø—ã—Ç–∫–∏ (fallback). –Ø–∑—ã–∫: {detected_lang}")
                return fallback_text, detected_lang
            else:
                error_msg = fallback_result.get('error', result.get('error', 'Unknown error'))
                return f"–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {error_msg}", 'unknown'

        except Exception as e:
            self.logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ transcribe_with_fallback: {e}", exc_info=True)
            return f"–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {str(e)}", 'unknown'

    def _transcribe_sync(self, audio_path: str, language_hint: str = None) -> dict:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏ (prompt)."""
        try:
            with open(audio_path, "rb") as audio_file:

                # üîß –ù–û–í–û–ï: –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É (prompt) –¥–ª—è –∫—Ö–º–µ—Ä—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
                # –≠—Ç–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –ø–æ–≤—ã—à–∞–µ—Ç —à–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ –∫—Ö–º–µ—Ä—Å–∫–æ–º –∞–ª—Ñ–∞–≤–∏—Ç–µ.
                prompt_text = None
                if language_hint == 'km':
                    prompt_text = "·ûü·ûΩ·ûü·üí·ûè·û∏, ·ûá·üÜ·ûö·û∂·ûî·ûü·ûΩ·ûö, ·û¢·ûö·ûÇ·ûª·ûé, ·ûü·ûº·ûò, ·ûî·û∂·ûë, ·ûÖ·û∂·ûü, ·ûÅ·üí·ûâ·ûª·üÜ"
                    self.logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º prompt –¥–ª—è –∫—Ö–º–µ—Ä—Å–∫–æ–≥–æ —è–∑—ã–∫–∞: {prompt_text}")

                response = self.client.audio.transcriptions.create(
                    model="whisper-1",
                    file=audio_file,
                    language=language_hint if language_hint else None,
                    prompt=prompt_text,  # <--- –ü–ï–†–ï–î–ê–ï–ú –ü–û–î–°–ö–ê–ó–ö–£
                    response_format="verbose_json"  # –ü–æ–ª—É—á–∞–µ–º –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö, –≤–∫–ª—é—á–∞—è —è–∑—ã–∫
                )

                detected_language = response.language
                transcribed_text = response.text.strip() if response.text else ''

                self.logger.info(f"OpenAI –æ–ø—Ä–µ–¥–µ–ª–∏–ª —è–∑—ã–∫: {detected_language}. –¢–µ–∫—Å—Ç: {transcribed_text[:100]}...")

                return {
                    'success': True,
                    'text': transcribed_text,
                    'detected_language': detected_language
                }

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –≤ _transcribe_sync: {e}")
            return {'success': False, 'text': '', 'error': str(e)}