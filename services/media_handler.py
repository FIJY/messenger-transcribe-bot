# services/media_handler.py
import os
import logging
from typing import Optional, Tuple, Dict, Any
from .audio_processor import AudioProcessor
from .language_detector import LanguageDetector
from .transcription_service import TranscriptionService
from .translation_service import TranslationService
from .native_script_service import NativeScriptService

logger = logging.getLogger(__name__)


class MediaHandler:
    def __init__(self, transcription_service: TranscriptionService, translation_service: TranslationService):
        self.audio_processor = AudioProcessor()
        self.language_detector = LanguageDetector()
        self.transcription_service = transcription_service
        self.translation_service = translation_service
        self.native_script_service = NativeScriptService()

    def process_media(self, file_path: str, user_preferences: Optional[Dict] = None) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–µ–¥–∏–∞ —Ñ–∞–π–ª (–∞—É–¥–∏–æ/–≤–∏–¥–µ–æ) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
        """
        audio_path = None
        user_prefs = user_preferences or {}

        try:
            logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞: {file_path}")

            # 1. –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            expected_language = user_prefs.get('preferred_language')
            target_language = user_prefs.get('target_language', 'en')
            auto_translate = user_prefs.get('auto_translate', False)

            logger.info(f"User preferences: expected_language={expected_language}, target_language={target_language}")

            # 2. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∞—É–¥–∏–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            audio_path = self.audio_processor.process_file(file_path)
            if not audio_path:
                return {'success': False, 'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –º–µ–¥–∏–∞ —Ñ–∞–π–ª'}

            # 3. –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –∞—É–¥–∏–æ —Å —É–º–Ω—ã–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —è–∑—ã–∫–∞
            text, detected_language = self.transcription_service.transcribe_with_fallback(
                audio_path,
                expected_language  # –ü–µ—Ä–µ–¥–∞–µ–º —è–∑—ã–∫, —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            )

            if text.startswith("–û—à–∏–±–∫–∞"):
                return {'success': False, 'error': text}

            # 4. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —è–∑—ã–∫–∞, –µ—Å–ª–∏ –æ–Ω –Ω–µ –±—ã–ª –∑–∞–¥–∞–Ω –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
            if not expected_language:
                language_analysis = self.language_detector.analyze_language(text)
                final_language = self._choose_best_language(
                    detected_language,
                    language_analysis.get('language'),
                    language_analysis.get('confidence', 0)
                )
                # üîß –£–õ–£–ß–®–ï–ù–ù–û–ï –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫—Ö–º–µ—Ä—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
                final_language = self._improve_khmer_detection(text, final_language)
            else:
                final_language = expected_language

            # 5. –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
            quality_analysis = self._analyze_transcription_quality(text, final_language)

            # 6. –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = {
                'success': True,
                'transcription': text,
                'detected_language': final_language,
                'quality_analysis': quality_analysis,
                'language_info': self._get_language_info_safe(final_language),
                'translation': None
            }

            # 7. –ü–µ—Ä–µ–≤–æ–¥–∏–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if auto_translate and target_language and target_language != final_language:
                translation_result = self.translation_service.translate_text(
                    text, target_language, final_language
                )
                if translation_result.get('success'):
                    result['translation'] = translation_result.get('translated_text')
                    result['translation_target'] = target_language

            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –Ø–∑—ã–∫: {final_language}. –†–µ–∑—É–ª—å—Ç–∞—Ç: {text[:100]}")
            return result

        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ–¥–∏–∞: {e}", exc_info=True)
            return {'success': False, 'error': f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {str(e)}'}
        finally:
            # 8. –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            if audio_path and audio_path != file_path:
                self.audio_processor.cleanup_temp_file(audio_path)
            self.audio_processor.cleanup_temp_file(file_path)

    def _choose_best_language(self, whisper_lang: str, detector_lang: str, confidence: float) -> str:
        """–í—ã–±–∏—Ä–∞–µ—Ç –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã–π —è–∑—ã–∫ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤."""
        if whisper_lang and whisper_lang != 'auto':
            # Whisper —á–∞—Å—Ç–æ —Ç–æ—á–Ω–µ–µ, –æ—Å–æ–±–µ–Ω–Ω–æ –µ—Å–ª–∏ –æ–Ω —É–≤–µ—Ä–µ–Ω
            return whisper_lang
        if confidence > 0.7:
            return detector_lang
        return whisper_lang if whisper_lang != 'auto' else detector_lang

    # üîß --- –ù–û–í–´–ô –ú–ï–¢–û–î --- üîß
    def _improve_khmer_detection(self, text: str, detected_language: str) -> str:
        """
        –£–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫—Ö–º–µ—Ä—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –ø—É—Ç–µ–º –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
        """
        if not text or detected_language == 'km':
            return detected_language

        text_lower = text.lower()
        khmer_keywords = [
            'bong', 'avan', 'kue', 'vie', 'mien', 'dak', 'chun', 'neng',
            'phnom penh', 'arkun', 'chum reap suor', 'som tos', 'ot te',
            'siem reap', 'battambang', 'kampong', 'susuday', 'ksabay',
            'preah', 'wat', 'nak', 'knhom', 'srey', 'pros', 'chea', 'thlai',
            'khmer', 'cambodia'
        ]

        khmer_word_count = sum(1 for keyword in khmer_keywords if keyword in text_lower)
        total_words = len(text_lower.split())

        if total_words == 0:
            return detected_language

        # –õ–æ–≥–∏–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è
        # –ï—Å–ª–∏ Whisper –æ–ø—Ä–µ–¥–µ–ª–∏–ª —Ç–∞–≥–∞–ª—å—Å–∫–∏–π ('tl') –∏–ª–∏ –≤—å–µ—Ç–Ω–∞–º—Å–∫–∏–π ('vi'), –Ω–æ –µ—Å—Ç—å –∫—Ö–º–µ—Ä—Å–∫–∏–µ —Å–ª–æ–≤–∞ - –º–µ–Ω—è–µ–º –Ω–∞ –∫—Ö–º–µ—Ä—Å–∫–∏–π.
        if detected_language in ['tl', 'vi'] and khmer_word_count > 0:
            logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ö–º–µ—Ä—Å–∫–∏–µ —Å–ª–æ–≤–∞. –ú–µ–Ω—è–µ–º —è–∑—ã–∫ —Å '{detected_language}' –Ω–∞ 'km'.")
            return 'km'

        # –ï—Å–ª–∏ —è–∑—ã–∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π, –Ω–æ –µ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏ –∫—Ö–º–µ—Ä—Å–∫–æ–≥–æ.
        if detected_language == 'en' and total_words > 0:
            khmer_ratio = khmer_word_count / total_words
            # –ï—Å–ª–∏ –±–æ–ª–µ–µ 15% —Å–ª–æ–≤ - –∫—Ö–º–µ—Ä—Å–∫–∏–µ, —ç—Ç–æ –ø–æ—á—Ç–∏ –Ω–∞–≤–µ—Ä–Ω—è–∫–∞ –∫—Ö–º–µ—Ä—Å–∫–∏–π
            if khmer_ratio > 0.15:
                logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {khmer_ratio:.0%} –∫—Ö–º–µ—Ä—Å–∫–∏—Ö —Å–ª–æ–≤. –ú–µ–Ω—è–µ–º —è–∑—ã–∫ —Å 'en' –Ω–∞ 'km'.")
                return 'km'
            # –î–∞–∂–µ –æ–¥–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –≤ –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–æ–º —Ç–µ–∫—Å—Ç–µ - —Å–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª
            if khmer_word_count >= 1 and total_words <= 5:
                logger.info(f"–ö–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç —Å –∫—Ö–º–µ—Ä—Å–∫–∏–º —Å–ª–æ–≤–æ–º. –ú–µ–Ω—è–µ–º —è–∑—ã–∫ —Å 'en' –Ω–∞ 'km'.")
                return 'km'

        return detected_language

    def _analyze_transcription_quality(self, text: str, language: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª—è –Ω–∞—Ç–∏–≤–Ω—ã—Ö —è–∑—ã–∫–æ–≤"""
        # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        try:
            native_languages = ['km', 'th', 'zh', 'ja', 'ko', 'vi']
            if language in native_languages:
                analysis = self.native_script_service.analyze_script_quality(text, language)
                analysis['formatted_message'] = self.native_script_service.format_quality_message(
                    analysis, language
                )
                return analysis
            else:
                return {
                    'quality': 'good',
                    'native_ratio': 1.0,
                    'message': '‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.',
                    'has_transliteration': False
                }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–∞—á–µ—Å—Ç–≤–∞: {e}")
            return {'quality': 'unknown', 'message': '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ.'}

    def _get_language_info_safe(self, detected_language: str) -> Dict[str, str]:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —è–∑—ã–∫–µ"""
        # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        language_names = {
            'km': {'name': 'Khmer', 'native': '·ûÅ·üí·ûò·üÇ·ûö'},
            'en': {'name': 'English', 'native': 'English'},
            'ru': {'name': 'Russian', 'native': '–†—É—Å—Å–∫–∏–π'},
            'th': {'name': 'Thai', 'native': '‡πÑ‡∏ó‡∏¢'},
            'vi': {'name': 'Vietnamese', 'native': 'Ti·∫øng Vi·ªát'},
            'zh': {'name': 'Chinese', 'native': '‰∏≠Êñá'},
            'ja': {'name': 'Japanese', 'native': 'Êó•Êú¨Ë™û'},
            'ko': {'name': 'Korean', 'native': 'ÌïúÍµ≠Ïñ¥'},
            'tl': {'name': 'Tagalog', 'native': 'Tagalog'}
        }
        return language_names.get(detected_language,
                                  {'name': detected_language.upper(), 'native': detected_language.upper()})

    def validate_file(self, file_path: str, is_premium: bool = False) -> Tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–∞–π–ª –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º"""
        return self.audio_processor.validate_audio_file(file_path)