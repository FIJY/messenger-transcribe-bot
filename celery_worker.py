# celery_worker.py - –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø –° –î–ò–ê–ì–ù–û–°–¢–ò–ö–û–ô –î–ò–°–ö–ê
import os
import logging
import requests
import time  # –î–ª—è –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
from celery import Celery
from dotenv import load_dotenv

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç—ã –≤–∞—à–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
from services.media_handler import MediaHandler
from services.transcription_service import TranscriptionService
from services.translation_service import TranslationService
from services.database import Database
from services.audio_processor import AudioProcessor
from httpx import Timeout

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Celery
redis_url = os.getenv('REDIS_URL')
if not redis_url:
    raise RuntimeError("REDIS_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

# –ì–æ–≤–æ—Ä–∏–º Celery, —á—Ç–æ–±—ã –æ–Ω –∏—Å–∫–∞–ª –∑–∞–¥–∞—á–∏ –≤ —ç—Ç–æ–º –∂–µ —Ñ–∞–π–ª–µ
celery_app = Celery('tasks', broker=redis_url, backend=redis_url, include=['celery_worker'])

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
try:
    transcription_service = TranscriptionService()
    translation_service = TranslationService()
    database = Database()
    media_handler = MediaHandler(transcription_service, translation_service)
    audio_processor = AudioProcessor()
    PAGE_ACCESS_TOKEN = os.getenv('PAGE_ACCESS_TOKEN')
    logger.info("Celery –≤–æ—Ä–∫–µ—Ä: –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.")
except Exception as e:
    logger.error(f"Celery –≤–æ—Ä–∫–µ—Ä: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò: {e}", exc_info=True)
    media_handler = None


def send_messenger_message(recipient_id: str, message_text: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç –∏–º–µ–Ω–∏ –≤–æ—Ä–∫–µ—Ä–∞."""
    if not PAGE_ACCESS_TOKEN:
        logger.error("PAGE_ACCESS_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return
    try:
        payload = {
            'recipient': {'id': recipient_id},
            'messaging_type': 'MESSAGE_TAG',
            'message': {'text': message_text},
            'tag': 'POST_PURCHASE_UPDATE',
            'access_token': PAGE_ACCESS_TOKEN
        }
        requests.post("https://graph.facebook.com/v18.0/me/messages", json=payload, timeout=10).raise_for_status()
        logger.info(f"–í–æ—Ä–∫–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient_id}")
    except Exception as e:
        logger.error(f"–í–æ—Ä–∫–µ—Ä –Ω–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient_id}: {e}", exc_info=True)


@celery_app.task(bind=True, name='tasks.process_media', max_retries=2, default_retry_delay=60)
def process_media_task(self, sender_id: str, file_path: str, user_preferences: dict):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ Celery —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π –¥–∏—Å–∫–∞."""
    logger.info(f"[{self.request.id}] –ù–∞—á–∞–ª–æ –∑–∞–¥–∞—á–∏ –¥–ª—è {sender_id}, —Ü–µ–ª–µ–≤–æ–π —Ñ–∞–π–ª: {file_path}")
    if not media_handler:
        send_messenger_message(sender_id, "‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
        return

    result = None
    try:
        # --- –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –î–ò–°–ö–ê ---
        shared_dir_path = os.path.dirname(file_path)
        logger.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ–±—â–µ–π –ø–∞–ø–∫–∏: {shared_dir_path}")
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏, –≤ –∫–æ—Ç–æ—Ä–æ–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞—à —Ñ–∞–π–ª
            shared_dir_contents = os.listdir(shared_dir_path)
            logger.info(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ {shared_dir_path}: {shared_dir_contents}")
        except Exception as list_e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ {shared_dir_path}: {list_e}")
        # --- –ö–û–ù–ï–¶ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò ---

        # –î–æ–±–∞–≤–∏–º –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–¥–µ—Ä–∂–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∏—Å–∫–∞
        time.sleep(2)

        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ä–∞–±–æ—Ç—É
        result = media_handler.process_media(file_path, user_preferences)

        if result.get('success'):
            lang_info = result.get('language_info', {})
            lang_name = lang_info.get('name', result.get('detected_language', ''))
            response_text = f"üéØ –Ø–∑—ã–∫: {lang_name}\n\nüìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:\n{result['transcription']}"
            send_messenger_message(sender_id, response_text)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            database.save_transcription(user_id=sender_id, **result)
            database.increment_usage(user_id=sender_id)
        else:
            send_messenger_message(sender_id,
                                   f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à —Ñ–∞–π–ª. –û—à–∏–±–∫–∞: {result.get('error', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")

    except Exception as exc:
        logger.error(f"[{self.request.id}] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ Celery: {exc}", exc_info=True)
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–¥–∞—á—É
            raise self.retry(exc=exc)
        except self.MaxRetriesExceededError:
            send_messenger_message(sender_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à —Ñ–∞–π–ª –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫.")
    finally:
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        # file_path - —ç—Ç–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π —Å–∫–∞—á–∞–ª message_handler
        # result['processed_audio_path'] - —ç—Ç–æ —Ñ–∞–π–ª .wav, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–ª audio_processor
        if os.path.exists(file_path):
            os.remove(file_path)
            logger.info(f"[{self.request.id}] –ò—Å—Ö–æ–¥–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {file_path}")
        if result and result.get('processed_audio_path') and os.path.exists(result['processed_audio_path']):
            if result.get('processed_audio_path') != file_path:
                os.remove(result.get('processed_audio_path'))
                logger.info(
                    f"[{self.request.id}] –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {result.get('processed_audio_path')}")