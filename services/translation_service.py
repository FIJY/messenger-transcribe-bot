import os
import logging
import openai
from .audio_processor import AudioProcessor

logger = logging.getLogger(__name__)


class TranslationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∞—É–¥–∏–æ/–≤–∏–¥–µ–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π"""

    def __init__(self):
        self.openai_api_key = os.getenv('OPENAI_API_KEY')
        self.audio_processor = AudioProcessor()

        if not self.openai_api_key:
            logger.warning("OPENAI_API_KEY not found")
            self.client_ready = False
        else:
            try:
                openai.api_key = self.openai_api_key
                self.client_ready = True
                logger.info("OpenAI Translation API initialized")
            except Exception as e:
                logger.error(f"Failed to initialize OpenAI: {e}")
                self.client_ready = False

    def translate_from_url(self, media_url, media_type='audio', user_subscription='free'):
        """–ü–µ—Ä–µ–≤–æ–¥ –º–µ–¥–∏–∞ –ø–æ URL"""
        if not self.client_ready:
            return self._mock_result()

        temp_file_path = None
        try:
            # 1. –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            media_data = self.audio_processor.download_media(media_url)

            # 2. –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ñ–∞–π–ª
            estimated_duration = self.audio_processor.validate_media_file(
                media_data, media_type, user_subscription
            )

            # 3. –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            temp_file_path = self.audio_processor.create_temp_file(media_data, media_type)

            # 4. –ü–µ—Ä–µ–≤–æ–¥–∏–º
            result = self._translate_file(temp_file_path)

            # 5. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if result['success']:
                result.update({
                    'duration': estimated_duration,
                    'media_type': media_type
                })

            return result

        except ValueError as e:
            return {'success': False, 'error': str(e)}
        except Exception as e:
            logger.error(f"Translation error: {e}")
            return {'success': False, 'error': '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'}
        finally:
            if temp_file_path:
                self.audio_processor.cleanup_temp_file(temp_file_path)

    def translate_from_data(self, media_data, media_type='audio', user_subscription='free'):
        """–ü–µ—Ä–µ–≤–æ–¥ –º–µ–¥–∏–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏"""
        if not self.client_ready:
            return self._mock_result()

        temp_file_path = None
        try:
            # 1. –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ñ–∞–π–ª
            estimated_duration = self.audio_processor.validate_media_file(
                media_data, media_type, user_subscription
            )

            # 2. –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            temp_file_path = self.audio_processor.create_temp_file(media_data, media_type)

            # 3. –ü–µ—Ä–µ–≤–æ–¥–∏–º
            result = self._translate_file(temp_file_path)

            # 4. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if result['success']:
                result.update({
                    'duration': estimated_duration,
                    'media_type': media_type
                })

            return result

        except ValueError as e:
            return {'success': False, 'error': str(e)}
        except Exception as e:
            logger.error(f"Translation error: {e}")
            return {'success': False, 'error': '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'}
        finally:
            if temp_file_path:
                self.audio_processor.cleanup_temp_file(temp_file_path)

    def _translate_file(self, file_path):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –ø–µ—Ä–µ–≤–æ–¥–∞ —Ñ–∞–π–ª–∞"""
        try:
            logger.info("Starting OpenAI translation")

            with open(file_path, 'rb') as audio_file:
                translation = openai.Audio.translate(
                    model="whisper-1",
                    file=audio_file,
                    response_format="json"
                )

            translated_text = translation['text'].strip()
            original_language = translation.get('language', 'unknown')

            logger.info(f"Translation completed. Original language: {original_language}")

            return {
                'success': True,
                'translated_text': translated_text,
                'original_language': original_language,
                'target_language': 'en',
                'raw_response': translation
            }

        except Exception as e:
            logger.error(f"OpenAI translation API error: {e}")
            return self._handle_api_error(e)

    def _handle_api_error(self, error):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ OpenAI API"""
        error_message = str(error)

        if "insufficient_quota" in error_message:
            return {
                'success': False,
                'error': '–ü—Ä–µ–≤—ã—à–µ–Ω–∞ –∫–≤–æ—Ç–∞ OpenAI API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
            }
        elif "invalid_request_error" in error_message:
            return {
                'success': False,
                'error': '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.'
            }
        elif "rate_limit" in error_message:
            return {
                'success': False,
                'error': '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.'
            }
        else:
            return {
                'success': False,
                'error': '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
            }

    def _mock_result(self):
        """–ó–∞–≥–ª—É—à–∫–∞ –∫–æ–≥–¥–∞ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
        return {
            'success': True,
            'translated_text': 'üîß –ù–∞—Å—Ç—Ä–æ–π—Ç–µ OPENAI_API_KEY –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞.',
            'original_language': 'unknown',
            'target_language': 'en'
        }

    def get_api_status(self):
        """–°—Ç–∞—Ç—É—Å API"""
        return {
            'translation_available': self.client_ready,
            'target_languages': ['en'],  # OpenAI Whisper –ø–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
            'supported_formats': self.audio_processor.supported_formats
        }